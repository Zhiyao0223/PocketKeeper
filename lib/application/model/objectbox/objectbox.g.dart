// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../app_setting.dart';
import '../category.dart';
import '../expense.dart';
import '../expense_goal.dart';
import '../expense_limit.dart';
import '../money_account.dart';
import '../notification.dart';
import '../user.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 4536523197199903666),
      name: 'Accounts',
      lastPropertyId: const obx_int.IdUid(5, 5484771927475102640),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1927567617307516716),
            name: 'accountId',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7143975452089488214),
            name: 'accountName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3094801882690806359),
            name: 'status',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1742152551514885231),
            name: 'createdDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5484771927475102640),
            name: 'updatedDate',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 315144935515057033),
      name: 'AppSetting',
      lastPropertyId: const obx_int.IdUid(7, 4439223013050474278),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3476569156638436473),
            name: 'settingId',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5268151864326111095),
            name: 'appName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 179426415255815816),
            name: 'appVersion',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 173464218547998653),
            name: 'appTheme',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5287786781941324436),
            name: 'appLanguage',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5448099486286494197),
            name: 'currencyCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 4439223013050474278),
            name: 'isGoogleSignIn',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 8274473162520644286),
      name: 'Category',
      lastPropertyId: const obx_int.IdUid(5, 6466760644895799881),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8904273275111824220),
            name: 'categoryId',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8869863115217801909),
            name: 'categoryName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8480523223339195982),
            name: 'status',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8149492127899699570),
            name: 'createdDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6466760644895799881),
            name: 'updatedDate',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 8111271521208513617),
      name: 'ExpenseGoal',
      lastPropertyId: const obx_int.IdUid(6, 4357637548451381125),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 818783050755660595),
            name: 'goalId',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8015504237749540547),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2467603760950992385),
            name: 'syncStatus',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4407385470638910999),
            name: 'status',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5624169876880700356),
            name: 'createdDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4357637548451381125),
            name: 'updatedDate',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 7217157261693112745),
      name: 'ExpenseLimit',
      lastPropertyId: const obx_int.IdUid(6, 3389386648009770702),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1960551722785279637),
            name: 'limitId',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4440854152569215896),
            name: 'amount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3400035453388215642),
            name: 'syncStatus',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 904076275816621528),
            name: 'status',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4460821885552537291),
            name: 'createdDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3389386648009770702),
            name: 'updatedDate',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 8649036038792840967),
      name: 'Expenses',
      lastPropertyId: const obx_int.IdUid(8, 2732817815801115738),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4855008058133372018),
            name: 'expensesId',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1370478481383784970),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 9218153597236932616),
            name: 'amount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3331601314660493215),
            name: 'syncStatus',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5936334437136341856),
            name: 'status',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1634819950033615450),
            name: 'createdDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 455330640177046780),
            name: 'updatedDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 2732817815801115738),
            name: 'expensesDate',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(7, 8157423987833682038),
      name: 'Notifications',
      lastPropertyId: const obx_int.IdUid(9, 4760845895471556519),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 766468994564218674),
            name: 'notificationId',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3488164953300865671),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 59430964750165530),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 188673473687283774),
            name: 'notificationType',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4729902823110874401),
            name: 'readStatus',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 167313262368507169),
            name: 'syncStatus',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 1006358596091133482),
            name: 'status',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4327653335030079589),
            name: 'createdDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 4760845895471556519),
            name: 'updatedDate',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(8, 1187728206617501265),
      name: 'Users',
      lastPropertyId: const obx_int.IdUid(9, 5155699172565171171),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7326477154656914661),
            name: 'userId',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7622717910168053254),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2936733067640858053),
            name: 'email',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3545728039221745814),
            name: 'password',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4554763002416229033),
            name: 'profilePictureUrl',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1412953391595192030),
            name: 'status',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 9197148529248291932),
            name: 'discordId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 8907046707387200426),
            name: 'createdDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 5155699172565171171),
            name: 'updatedDate',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(8, 1187728206617501265),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Accounts: obx_int.EntityDefinition<Accounts>(
        model: _entities[0],
        toOneRelations: (Accounts object) => [],
        toManyRelations: (Accounts object) => {},
        getId: (Accounts object) => object.accountId,
        setId: (Accounts object, int id) {
          object.accountId = id;
        },
        objectToFB: (Accounts object, fb.Builder fbb) {
          final accountNameOffset = fbb.writeString(object.accountName);
          fbb.startTable(6);
          fbb.addInt64(0, object.accountId);
          fbb.addOffset(1, accountNameOffset);
          fbb.addInt64(2, object.status);
          fbb.addInt64(3, object.createdDate.millisecondsSinceEpoch);
          fbb.addInt64(4, object.updatedDate.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.accountId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final accountIdParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final accountNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final statusParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final object = Accounts(
              accountId: accountIdParam,
              accountName: accountNameParam,
              status: statusParam)
            ..createdDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0))
            ..updatedDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));

          return object;
        }),
    AppSetting: obx_int.EntityDefinition<AppSetting>(
        model: _entities[1],
        toOneRelations: (AppSetting object) => [],
        toManyRelations: (AppSetting object) => {},
        getId: (AppSetting object) => object.settingId,
        setId: (AppSetting object, int id) {
          object.settingId = id;
        },
        objectToFB: (AppSetting object, fb.Builder fbb) {
          final appNameOffset = fbb.writeString(object.appName);
          final appVersionOffset = fbb.writeString(object.appVersion);
          final appThemeOffset = fbb.writeString(object.appTheme);
          final appLanguageOffset = fbb.writeString(object.appLanguage);
          final currencyCodeOffset = fbb.writeString(object.currencyCode);
          fbb.startTable(8);
          fbb.addInt64(0, object.settingId);
          fbb.addOffset(1, appNameOffset);
          fbb.addOffset(2, appVersionOffset);
          fbb.addOffset(3, appThemeOffset);
          fbb.addOffset(4, appLanguageOffset);
          fbb.addOffset(5, currencyCodeOffset);
          fbb.addBool(6, object.isGoogleSignIn);
          fbb.finish(fbb.endTable());
          return object.settingId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = AppSetting()
            ..settingId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..appName = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..appVersion = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..appTheme = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 10, '')
            ..appLanguage = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 12, '')
            ..currencyCode = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 14, '')
            ..isGoogleSignIn =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 16, false);

          return object;
        }),
    Category: obx_int.EntityDefinition<Category>(
        model: _entities[2],
        toOneRelations: (Category object) => [],
        toManyRelations: (Category object) => {},
        getId: (Category object) => object.categoryId,
        setId: (Category object, int id) {
          object.categoryId = id;
        },
        objectToFB: (Category object, fb.Builder fbb) {
          final categoryNameOffset = fbb.writeString(object.categoryName);
          fbb.startTable(6);
          fbb.addInt64(0, object.categoryId);
          fbb.addOffset(1, categoryNameOffset);
          fbb.addInt64(2, object.status);
          fbb.addInt64(3, object.createdDate.millisecondsSinceEpoch);
          fbb.addInt64(4, object.updatedDate.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.categoryId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Category()
            ..categoryId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..categoryName = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..status =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)
            ..createdDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0))
            ..updatedDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));

          return object;
        }),
    ExpenseGoal: obx_int.EntityDefinition<ExpenseGoal>(
        model: _entities[3],
        toOneRelations: (ExpenseGoal object) => [],
        toManyRelations: (ExpenseGoal object) => {},
        getId: (ExpenseGoal object) => object.goalId,
        setId: (ExpenseGoal object, int id) {
          object.goalId = id;
        },
        objectToFB: (ExpenseGoal object, fb.Builder fbb) {
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(7);
          fbb.addInt64(0, object.goalId);
          fbb.addOffset(1, descriptionOffset);
          fbb.addInt64(2, object.syncStatus);
          fbb.addInt64(3, object.status);
          fbb.addInt64(4, object.createdDate.millisecondsSinceEpoch);
          fbb.addInt64(5, object.updatedDate.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.goalId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ExpenseGoal()
            ..goalId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..description = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..syncStatus =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)
            ..status =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)
            ..createdDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0))
            ..updatedDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));

          return object;
        }),
    ExpenseLimit: obx_int.EntityDefinition<ExpenseLimit>(
        model: _entities[4],
        toOneRelations: (ExpenseLimit object) => [],
        toManyRelations: (ExpenseLimit object) => {},
        getId: (ExpenseLimit object) => object.limitId,
        setId: (ExpenseLimit object, int id) {
          object.limitId = id;
        },
        objectToFB: (ExpenseLimit object, fb.Builder fbb) {
          fbb.startTable(7);
          fbb.addInt64(0, object.limitId);
          fbb.addFloat64(1, object.amount);
          fbb.addInt64(2, object.syncStatus);
          fbb.addInt64(3, object.status);
          fbb.addInt64(4, object.createdDate.millisecondsSinceEpoch);
          fbb.addInt64(5, object.updatedDate.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.limitId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ExpenseLimit()
            ..limitId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..amount =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 6, 0)
            ..syncStatus =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)
            ..status =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)
            ..createdDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0))
            ..updatedDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));

          return object;
        }),
    Expenses: obx_int.EntityDefinition<Expenses>(
        model: _entities[5],
        toOneRelations: (Expenses object) => [],
        toManyRelations: (Expenses object) => {},
        getId: (Expenses object) => object.expensesId,
        setId: (Expenses object, int id) {
          object.expensesId = id;
        },
        objectToFB: (Expenses object, fb.Builder fbb) {
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(9);
          fbb.addInt64(0, object.expensesId);
          fbb.addOffset(1, descriptionOffset);
          fbb.addFloat64(2, object.amount);
          fbb.addInt64(3, object.syncStatus);
          fbb.addInt64(4, object.status);
          fbb.addInt64(5, object.createdDate.millisecondsSinceEpoch);
          fbb.addInt64(6, object.updatedDate.millisecondsSinceEpoch);
          fbb.addInt64(7, object.expensesDate.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.expensesId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Expenses()
            ..expensesId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..description = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..amount =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0)
            ..syncStatus =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)
            ..status =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)
            ..createdDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0))
            ..updatedDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0))
            ..expensesDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0));

          return object;
        }),
    Notifications: obx_int.EntityDefinition<Notifications>(
        model: _entities[6],
        toOneRelations: (Notifications object) => [],
        toManyRelations: (Notifications object) => {},
        getId: (Notifications object) => object.notificationId,
        setId: (Notifications object, int id) {
          object.notificationId = id;
        },
        objectToFB: (Notifications object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(10);
          fbb.addInt64(0, object.notificationId);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addInt64(3, object.notificationType);
          fbb.addInt64(4, object.readStatus);
          fbb.addInt64(5, object.syncStatus);
          fbb.addInt64(6, object.status);
          fbb.addInt64(7, object.createdDate.millisecondsSinceEpoch);
          fbb.addInt64(8, object.updatedDate.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.notificationId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Notifications()
            ..notificationId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..title = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..description = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..notificationType =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)
            ..readStatus =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)
            ..syncStatus =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)
            ..status =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0)
            ..createdDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0))
            ..updatedDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0));

          return object;
        }),
    Users: obx_int.EntityDefinition<Users>(
        model: _entities[7],
        toOneRelations: (Users object) => [],
        toManyRelations: (Users object) => {},
        getId: (Users object) => object.userId,
        setId: (Users object, int id) {
          object.userId = id;
        },
        objectToFB: (Users object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final emailOffset = fbb.writeString(object.email);
          final passwordOffset = fbb.writeString(object.password);
          final profilePictureUrlOffset =
              fbb.writeString(object.profilePictureUrl);
          final discordIdOffset = fbb.writeString(object.discordId);
          fbb.startTable(10);
          fbb.addInt64(0, object.userId);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, emailOffset);
          fbb.addOffset(3, passwordOffset);
          fbb.addOffset(4, profilePictureUrlOffset);
          fbb.addInt64(5, object.status);
          fbb.addOffset(6, discordIdOffset);
          fbb.addInt64(7, object.createdDate.millisecondsSinceEpoch);
          fbb.addInt64(8, object.updatedDate.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.userId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Users()
            ..userId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..email = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..password = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 10, '')
            ..profilePictureUrl = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 12, '')
            ..status =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)
            ..discordId = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 16, '')
            ..createdDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0))
            ..updatedDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0));

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Accounts] entity fields to define ObjectBox queries.
class Accounts_ {
  /// See [Accounts.accountId].
  static final accountId =
      obx.QueryIntegerProperty<Accounts>(_entities[0].properties[0]);

  /// See [Accounts.accountName].
  static final accountName =
      obx.QueryStringProperty<Accounts>(_entities[0].properties[1]);

  /// See [Accounts.status].
  static final status =
      obx.QueryIntegerProperty<Accounts>(_entities[0].properties[2]);

  /// See [Accounts.createdDate].
  static final createdDate =
      obx.QueryDateProperty<Accounts>(_entities[0].properties[3]);

  /// See [Accounts.updatedDate].
  static final updatedDate =
      obx.QueryDateProperty<Accounts>(_entities[0].properties[4]);
}

/// [AppSetting] entity fields to define ObjectBox queries.
class AppSetting_ {
  /// See [AppSetting.settingId].
  static final settingId =
      obx.QueryIntegerProperty<AppSetting>(_entities[1].properties[0]);

  /// See [AppSetting.appName].
  static final appName =
      obx.QueryStringProperty<AppSetting>(_entities[1].properties[1]);

  /// See [AppSetting.appVersion].
  static final appVersion =
      obx.QueryStringProperty<AppSetting>(_entities[1].properties[2]);

  /// See [AppSetting.appTheme].
  static final appTheme =
      obx.QueryStringProperty<AppSetting>(_entities[1].properties[3]);

  /// See [AppSetting.appLanguage].
  static final appLanguage =
      obx.QueryStringProperty<AppSetting>(_entities[1].properties[4]);

  /// See [AppSetting.currencyCode].
  static final currencyCode =
      obx.QueryStringProperty<AppSetting>(_entities[1].properties[5]);

  /// See [AppSetting.isGoogleSignIn].
  static final isGoogleSignIn =
      obx.QueryBooleanProperty<AppSetting>(_entities[1].properties[6]);
}

/// [Category] entity fields to define ObjectBox queries.
class Category_ {
  /// See [Category.categoryId].
  static final categoryId =
      obx.QueryIntegerProperty<Category>(_entities[2].properties[0]);

  /// See [Category.categoryName].
  static final categoryName =
      obx.QueryStringProperty<Category>(_entities[2].properties[1]);

  /// See [Category.status].
  static final status =
      obx.QueryIntegerProperty<Category>(_entities[2].properties[2]);

  /// See [Category.createdDate].
  static final createdDate =
      obx.QueryDateProperty<Category>(_entities[2].properties[3]);

  /// See [Category.updatedDate].
  static final updatedDate =
      obx.QueryDateProperty<Category>(_entities[2].properties[4]);
}

/// [ExpenseGoal] entity fields to define ObjectBox queries.
class ExpenseGoal_ {
  /// See [ExpenseGoal.goalId].
  static final goalId =
      obx.QueryIntegerProperty<ExpenseGoal>(_entities[3].properties[0]);

  /// See [ExpenseGoal.description].
  static final description =
      obx.QueryStringProperty<ExpenseGoal>(_entities[3].properties[1]);

  /// See [ExpenseGoal.syncStatus].
  static final syncStatus =
      obx.QueryIntegerProperty<ExpenseGoal>(_entities[3].properties[2]);

  /// See [ExpenseGoal.status].
  static final status =
      obx.QueryIntegerProperty<ExpenseGoal>(_entities[3].properties[3]);

  /// See [ExpenseGoal.createdDate].
  static final createdDate =
      obx.QueryDateProperty<ExpenseGoal>(_entities[3].properties[4]);

  /// See [ExpenseGoal.updatedDate].
  static final updatedDate =
      obx.QueryDateProperty<ExpenseGoal>(_entities[3].properties[5]);
}

/// [ExpenseLimit] entity fields to define ObjectBox queries.
class ExpenseLimit_ {
  /// See [ExpenseLimit.limitId].
  static final limitId =
      obx.QueryIntegerProperty<ExpenseLimit>(_entities[4].properties[0]);

  /// See [ExpenseLimit.amount].
  static final amount =
      obx.QueryDoubleProperty<ExpenseLimit>(_entities[4].properties[1]);

  /// See [ExpenseLimit.syncStatus].
  static final syncStatus =
      obx.QueryIntegerProperty<ExpenseLimit>(_entities[4].properties[2]);

  /// See [ExpenseLimit.status].
  static final status =
      obx.QueryIntegerProperty<ExpenseLimit>(_entities[4].properties[3]);

  /// See [ExpenseLimit.createdDate].
  static final createdDate =
      obx.QueryDateProperty<ExpenseLimit>(_entities[4].properties[4]);

  /// See [ExpenseLimit.updatedDate].
  static final updatedDate =
      obx.QueryDateProperty<ExpenseLimit>(_entities[4].properties[5]);
}

/// [Expenses] entity fields to define ObjectBox queries.
class Expenses_ {
  /// See [Expenses.expensesId].
  static final expensesId =
      obx.QueryIntegerProperty<Expenses>(_entities[5].properties[0]);

  /// See [Expenses.description].
  static final description =
      obx.QueryStringProperty<Expenses>(_entities[5].properties[1]);

  /// See [Expenses.amount].
  static final amount =
      obx.QueryDoubleProperty<Expenses>(_entities[5].properties[2]);

  /// See [Expenses.syncStatus].
  static final syncStatus =
      obx.QueryIntegerProperty<Expenses>(_entities[5].properties[3]);

  /// See [Expenses.status].
  static final status =
      obx.QueryIntegerProperty<Expenses>(_entities[5].properties[4]);

  /// See [Expenses.createdDate].
  static final createdDate =
      obx.QueryDateProperty<Expenses>(_entities[5].properties[5]);

  /// See [Expenses.updatedDate].
  static final updatedDate =
      obx.QueryDateProperty<Expenses>(_entities[5].properties[6]);

  /// See [Expenses.expensesDate].
  static final expensesDate =
      obx.QueryDateProperty<Expenses>(_entities[5].properties[7]);
}

/// [Notifications] entity fields to define ObjectBox queries.
class Notifications_ {
  /// See [Notifications.notificationId].
  static final notificationId =
      obx.QueryIntegerProperty<Notifications>(_entities[6].properties[0]);

  /// See [Notifications.title].
  static final title =
      obx.QueryStringProperty<Notifications>(_entities[6].properties[1]);

  /// See [Notifications.description].
  static final description =
      obx.QueryStringProperty<Notifications>(_entities[6].properties[2]);

  /// See [Notifications.notificationType].
  static final notificationType =
      obx.QueryIntegerProperty<Notifications>(_entities[6].properties[3]);

  /// See [Notifications.readStatus].
  static final readStatus =
      obx.QueryIntegerProperty<Notifications>(_entities[6].properties[4]);

  /// See [Notifications.syncStatus].
  static final syncStatus =
      obx.QueryIntegerProperty<Notifications>(_entities[6].properties[5]);

  /// See [Notifications.status].
  static final status =
      obx.QueryIntegerProperty<Notifications>(_entities[6].properties[6]);

  /// See [Notifications.createdDate].
  static final createdDate =
      obx.QueryDateProperty<Notifications>(_entities[6].properties[7]);

  /// See [Notifications.updatedDate].
  static final updatedDate =
      obx.QueryDateProperty<Notifications>(_entities[6].properties[8]);
}

/// [Users] entity fields to define ObjectBox queries.
class Users_ {
  /// See [Users.userId].
  static final userId =
      obx.QueryIntegerProperty<Users>(_entities[7].properties[0]);

  /// See [Users.name].
  static final name =
      obx.QueryStringProperty<Users>(_entities[7].properties[1]);

  /// See [Users.email].
  static final email =
      obx.QueryStringProperty<Users>(_entities[7].properties[2]);

  /// See [Users.password].
  static final password =
      obx.QueryStringProperty<Users>(_entities[7].properties[3]);

  /// See [Users.profilePictureUrl].
  static final profilePictureUrl =
      obx.QueryStringProperty<Users>(_entities[7].properties[4]);

  /// See [Users.status].
  static final status =
      obx.QueryIntegerProperty<Users>(_entities[7].properties[5]);

  /// See [Users.discordId].
  static final discordId =
      obx.QueryStringProperty<Users>(_entities[7].properties[6]);

  /// See [Users.createdDate].
  static final createdDate =
      obx.QueryDateProperty<Users>(_entities[7].properties[7]);

  /// See [Users.updatedDate].
  static final updatedDate =
      obx.QueryDateProperty<Users>(_entities[7].properties[8]);
}
