// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';
import 'package:pocketkeeper/application/model/app_setting.dart';
import 'package:pocketkeeper/application/model/category.dart';
import 'package:pocketkeeper/application/model/expense.dart';
import 'package:pocketkeeper/application/model/expense_goal.dart';
import 'package:pocketkeeper/application/model/expense_limit.dart';
import 'package:pocketkeeper/application/model/notification.dart';
import 'package:pocketkeeper/application/model/user.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 7591803494481064069),
      name: 'AppSetting',
      lastPropertyId: const obx_int.IdUid(6, 3833789153188492074),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7027277184417824226),
            name: 'settingId',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6047427825779123513),
            name: 'appName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2828241217858077367),
            name: 'appVersion',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1441917464119919907),
            name: 'appTheme',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3104525328791280593),
            name: 'appLanguage',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3833789153188492074),
            name: 'isGoogleSignIn',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 4099005473723442387),
      name: 'Users',
      lastPropertyId: const obx_int.IdUid(9, 5375667924482714243),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1046575978483673290),
            name: 'userId',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4834522335989416145),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5118182561771429516),
            name: 'email',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4620785223011802340),
            name: 'password',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 326994964936600322),
            name: 'profilePictureUrl',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2960832736251955213),
            name: 'status',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 8034546882503867637),
            name: 'discordId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 2289626801419550790),
            name: 'createdDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 5375667924482714243),
            name: 'updatedDate',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 3025619273197694542),
      name: 'Category',
      lastPropertyId: const obx_int.IdUid(5, 1681659250633829195),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8618308509517752110),
            name: 'categoryId',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3058058219022882820),
            name: 'categoryName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8698181298524476734),
            name: 'status',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8573923927818462118),
            name: 'createdDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1681659250633829195),
            name: 'updatedDate',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 114203710289274771),
      name: 'ExpenseGoal',
      lastPropertyId: const obx_int.IdUid(6, 1374043572643727156),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5241697988911660043),
            name: 'goalId',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1794141144736051012),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3105336187316285080),
            name: 'syncStatus',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4114630894925844804),
            name: 'status',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4833581895926460763),
            name: 'createdDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1374043572643727156),
            name: 'updatedDate',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 6435066898376890431),
      name: 'ExpenseLimit',
      lastPropertyId: const obx_int.IdUid(6, 330895841051200047),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2336044499413987235),
            name: 'limitId',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5046797410039900269),
            name: 'amount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8572463241157909593),
            name: 'syncStatus',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6406526798600848912),
            name: 'status',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 243241337592056600),
            name: 'createdDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 330895841051200047),
            name: 'updatedDate',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 2177208440731471193),
      name: 'Expenses',
      lastPropertyId: const obx_int.IdUid(7, 2377612675940078189),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4523272466725962661),
            name: 'expensesId',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4093451223960780674),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7963125016093819547),
            name: 'amount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3480207250137020281),
            name: 'syncStatus',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7684265858633254992),
            name: 'status',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8550090345491260339),
            name: 'createdDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2377612675940078189),
            name: 'updatedDate',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(7, 3162520303474849234),
      name: 'Notifications',
      lastPropertyId: const obx_int.IdUid(9, 2991231133006473349),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1276189901437122023),
            name: 'notificationId',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5813436833074905967),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7129991718619338821),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8940415073478934459),
            name: 'notificationType',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8588981118925732864),
            name: 'readStatus',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6675209750329280058),
            name: 'syncStatus',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 7171197087540979015),
            name: 'status',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 4298917217426924716),
            name: 'createdDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 2991231133006473349),
            name: 'updatedDate',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(7, 3162520303474849234),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    AppSetting: obx_int.EntityDefinition<AppSetting>(
        model: _entities[0],
        toOneRelations: (AppSetting object) => [],
        toManyRelations: (AppSetting object) => {},
        getId: (AppSetting object) => object.settingId,
        setId: (AppSetting object, int id) {
          object.settingId = id;
        },
        objectToFB: (AppSetting object, fb.Builder fbb) {
          final appNameOffset = fbb.writeString(object.appName);
          final appVersionOffset = fbb.writeString(object.appVersion);
          final appThemeOffset = fbb.writeString(object.appTheme);
          final appLanguageOffset = fbb.writeString(object.appLanguage);
          fbb.startTable(7);
          fbb.addInt64(0, object.settingId);
          fbb.addOffset(1, appNameOffset);
          fbb.addOffset(2, appVersionOffset);
          fbb.addOffset(3, appThemeOffset);
          fbb.addOffset(4, appLanguageOffset);
          fbb.addBool(5, object.isGoogleSignIn);
          fbb.finish(fbb.endTable());
          return object.settingId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = AppSetting()
            ..settingId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..appName = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..appVersion = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..appTheme = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 10, '')
            ..appLanguage = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 12, '')
            ..isGoogleSignIn =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false);

          return object;
        }),
    Users: obx_int.EntityDefinition<Users>(
        model: _entities[1],
        toOneRelations: (Users object) => [],
        toManyRelations: (Users object) => {},
        getId: (Users object) => object.userId,
        setId: (Users object, int id) {
          object.userId = id;
        },
        objectToFB: (Users object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final emailOffset = fbb.writeString(object.email);
          final passwordOffset = fbb.writeString(object.password);
          final profilePictureUrlOffset =
              fbb.writeString(object.profilePictureUrl);
          final discordIdOffset = fbb.writeString(object.discordId);
          fbb.startTable(10);
          fbb.addInt64(0, object.userId);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, emailOffset);
          fbb.addOffset(3, passwordOffset);
          fbb.addOffset(4, profilePictureUrlOffset);
          fbb.addInt64(5, object.status);
          fbb.addOffset(6, discordIdOffset);
          fbb.addInt64(7, object.createdDate.millisecondsSinceEpoch);
          fbb.addInt64(8, object.updatedDate.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.userId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Users()
            ..userId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..email = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..password = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 10, '')
            ..profilePictureUrl = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 12, '')
            ..status =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)
            ..discordId = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 16, '')
            ..createdDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0))
            ..updatedDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0));

          return object;
        }),
    Category: obx_int.EntityDefinition<Category>(
        model: _entities[2],
        toOneRelations: (Category object) => [],
        toManyRelations: (Category object) => {},
        getId: (Category object) => object.categoryId,
        setId: (Category object, int id) {
          object.categoryId = id;
        },
        objectToFB: (Category object, fb.Builder fbb) {
          final categoryNameOffset = fbb.writeString(object.categoryName);
          fbb.startTable(6);
          fbb.addInt64(0, object.categoryId);
          fbb.addOffset(1, categoryNameOffset);
          fbb.addInt64(2, object.status);
          fbb.addInt64(3, object.createdDate.millisecondsSinceEpoch);
          fbb.addInt64(4, object.updatedDate.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.categoryId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Category()
            ..categoryId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..categoryName = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..status =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)
            ..createdDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0))
            ..updatedDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));

          return object;
        }),
    ExpenseGoal: obx_int.EntityDefinition<ExpenseGoal>(
        model: _entities[3],
        toOneRelations: (ExpenseGoal object) => [],
        toManyRelations: (ExpenseGoal object) => {},
        getId: (ExpenseGoal object) => object.goalId,
        setId: (ExpenseGoal object, int id) {
          object.goalId = id;
        },
        objectToFB: (ExpenseGoal object, fb.Builder fbb) {
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(7);
          fbb.addInt64(0, object.goalId);
          fbb.addOffset(1, descriptionOffset);
          fbb.addInt64(2, object.syncStatus);
          fbb.addInt64(3, object.status);
          fbb.addInt64(4, object.createdDate.millisecondsSinceEpoch);
          fbb.addInt64(5, object.updatedDate.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.goalId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ExpenseGoal()
            ..goalId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..description = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..syncStatus =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)
            ..status =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)
            ..createdDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0))
            ..updatedDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));

          return object;
        }),
    ExpenseLimit: obx_int.EntityDefinition<ExpenseLimit>(
        model: _entities[4],
        toOneRelations: (ExpenseLimit object) => [],
        toManyRelations: (ExpenseLimit object) => {},
        getId: (ExpenseLimit object) => object.limitId,
        setId: (ExpenseLimit object, int id) {
          object.limitId = id;
        },
        objectToFB: (ExpenseLimit object, fb.Builder fbb) {
          fbb.startTable(7);
          fbb.addInt64(0, object.limitId);
          fbb.addFloat64(1, object.amount);
          fbb.addInt64(2, object.syncStatus);
          fbb.addInt64(3, object.status);
          fbb.addInt64(4, object.createdDate.millisecondsSinceEpoch);
          fbb.addInt64(5, object.updatedDate.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.limitId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ExpenseLimit()
            ..limitId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..amount =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 6, 0)
            ..syncStatus =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)
            ..status =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)
            ..createdDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0))
            ..updatedDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));

          return object;
        }),
    Expenses: obx_int.EntityDefinition<Expenses>(
        model: _entities[5],
        toOneRelations: (Expenses object) => [],
        toManyRelations: (Expenses object) => {},
        getId: (Expenses object) => object.expensesId,
        setId: (Expenses object, int id) {
          object.expensesId = id;
        },
        objectToFB: (Expenses object, fb.Builder fbb) {
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(8);
          fbb.addInt64(0, object.expensesId);
          fbb.addOffset(1, descriptionOffset);
          fbb.addFloat64(2, object.amount);
          fbb.addInt64(3, object.syncStatus);
          fbb.addInt64(4, object.status);
          fbb.addInt64(5, object.createdDate.millisecondsSinceEpoch);
          fbb.addInt64(6, object.updatedDate.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.expensesId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Expenses()
            ..expensesId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..description = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..amount =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0)
            ..syncStatus =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)
            ..status =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)
            ..createdDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0))
            ..updatedDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0));

          return object;
        }),
    Notifications: obx_int.EntityDefinition<Notifications>(
        model: _entities[6],
        toOneRelations: (Notifications object) => [],
        toManyRelations: (Notifications object) => {},
        getId: (Notifications object) => object.notificationId,
        setId: (Notifications object, int id) {
          object.notificationId = id;
        },
        objectToFB: (Notifications object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(10);
          fbb.addInt64(0, object.notificationId);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addInt64(3, object.notificationType);
          fbb.addInt64(4, object.readStatus);
          fbb.addInt64(5, object.syncStatus);
          fbb.addInt64(6, object.status);
          fbb.addInt64(7, object.createdDate.millisecondsSinceEpoch);
          fbb.addInt64(8, object.updatedDate.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.notificationId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Notifications()
            ..notificationId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..title = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..description = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..notificationType =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)
            ..readStatus =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)
            ..syncStatus =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)
            ..status =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0)
            ..createdDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0))
            ..updatedDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0));

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [AppSetting] entity fields to define ObjectBox queries.
class AppSetting_ {
  /// See [AppSetting.settingId].
  static final settingId =
      obx.QueryIntegerProperty<AppSetting>(_entities[0].properties[0]);

  /// See [AppSetting.appName].
  static final appName =
      obx.QueryStringProperty<AppSetting>(_entities[0].properties[1]);

  /// See [AppSetting.appVersion].
  static final appVersion =
      obx.QueryStringProperty<AppSetting>(_entities[0].properties[2]);

  /// See [AppSetting.appTheme].
  static final appTheme =
      obx.QueryStringProperty<AppSetting>(_entities[0].properties[3]);

  /// See [AppSetting.appLanguage].
  static final appLanguage =
      obx.QueryStringProperty<AppSetting>(_entities[0].properties[4]);

  /// See [AppSetting.isGoogleSignIn].
  static final isGoogleSignIn =
      obx.QueryBooleanProperty<AppSetting>(_entities[0].properties[5]);
}

/// [Users] entity fields to define ObjectBox queries.
class Users_ {
  /// See [Users.userId].
  static final userId =
      obx.QueryIntegerProperty<Users>(_entities[1].properties[0]);

  /// See [Users.name].
  static final name =
      obx.QueryStringProperty<Users>(_entities[1].properties[1]);

  /// See [Users.email].
  static final email =
      obx.QueryStringProperty<Users>(_entities[1].properties[2]);

  /// See [Users.password].
  static final password =
      obx.QueryStringProperty<Users>(_entities[1].properties[3]);

  /// See [Users.profilePictureUrl].
  static final profilePictureUrl =
      obx.QueryStringProperty<Users>(_entities[1].properties[4]);

  /// See [Users.status].
  static final status =
      obx.QueryIntegerProperty<Users>(_entities[1].properties[5]);

  /// See [Users.discordId].
  static final discordId =
      obx.QueryStringProperty<Users>(_entities[1].properties[6]);

  /// See [Users.createdDate].
  static final createdDate =
      obx.QueryDateProperty<Users>(_entities[1].properties[7]);

  /// See [Users.updatedDate].
  static final updatedDate =
      obx.QueryDateProperty<Users>(_entities[1].properties[8]);
}

/// [Category] entity fields to define ObjectBox queries.
class Category_ {
  /// See [Category.categoryId].
  static final categoryId =
      obx.QueryIntegerProperty<Category>(_entities[2].properties[0]);

  /// See [Category.categoryName].
  static final categoryName =
      obx.QueryStringProperty<Category>(_entities[2].properties[1]);

  /// See [Category.status].
  static final status =
      obx.QueryIntegerProperty<Category>(_entities[2].properties[2]);

  /// See [Category.createdDate].
  static final createdDate =
      obx.QueryDateProperty<Category>(_entities[2].properties[3]);

  /// See [Category.updatedDate].
  static final updatedDate =
      obx.QueryDateProperty<Category>(_entities[2].properties[4]);
}

/// [ExpenseGoal] entity fields to define ObjectBox queries.
class ExpenseGoal_ {
  /// See [ExpenseGoal.goalId].
  static final goalId =
      obx.QueryIntegerProperty<ExpenseGoal>(_entities[3].properties[0]);

  /// See [ExpenseGoal.description].
  static final description =
      obx.QueryStringProperty<ExpenseGoal>(_entities[3].properties[1]);

  /// See [ExpenseGoal.syncStatus].
  static final syncStatus =
      obx.QueryIntegerProperty<ExpenseGoal>(_entities[3].properties[2]);

  /// See [ExpenseGoal.status].
  static final status =
      obx.QueryIntegerProperty<ExpenseGoal>(_entities[3].properties[3]);

  /// See [ExpenseGoal.createdDate].
  static final createdDate =
      obx.QueryDateProperty<ExpenseGoal>(_entities[3].properties[4]);

  /// See [ExpenseGoal.updatedDate].
  static final updatedDate =
      obx.QueryDateProperty<ExpenseGoal>(_entities[3].properties[5]);
}

/// [ExpenseLimit] entity fields to define ObjectBox queries.
class ExpenseLimit_ {
  /// See [ExpenseLimit.limitId].
  static final limitId =
      obx.QueryIntegerProperty<ExpenseLimit>(_entities[4].properties[0]);

  /// See [ExpenseLimit.amount].
  static final amount =
      obx.QueryDoubleProperty<ExpenseLimit>(_entities[4].properties[1]);

  /// See [ExpenseLimit.syncStatus].
  static final syncStatus =
      obx.QueryIntegerProperty<ExpenseLimit>(_entities[4].properties[2]);

  /// See [ExpenseLimit.status].
  static final status =
      obx.QueryIntegerProperty<ExpenseLimit>(_entities[4].properties[3]);

  /// See [ExpenseLimit.createdDate].
  static final createdDate =
      obx.QueryDateProperty<ExpenseLimit>(_entities[4].properties[4]);

  /// See [ExpenseLimit.updatedDate].
  static final updatedDate =
      obx.QueryDateProperty<ExpenseLimit>(_entities[4].properties[5]);
}

/// [Expenses] entity fields to define ObjectBox queries.
class Expenses_ {
  /// See [Expenses.expensesId].
  static final expensesId =
      obx.QueryIntegerProperty<Expenses>(_entities[5].properties[0]);

  /// See [Expenses.description].
  static final description =
      obx.QueryStringProperty<Expenses>(_entities[5].properties[1]);

  /// See [Expenses.amount].
  static final amount =
      obx.QueryDoubleProperty<Expenses>(_entities[5].properties[2]);

  /// See [Expenses.syncStatus].
  static final syncStatus =
      obx.QueryIntegerProperty<Expenses>(_entities[5].properties[3]);

  /// See [Expenses.status].
  static final status =
      obx.QueryIntegerProperty<Expenses>(_entities[5].properties[4]);

  /// See [Expenses.createdDate].
  static final createdDate =
      obx.QueryDateProperty<Expenses>(_entities[5].properties[5]);

  /// See [Expenses.updatedDate].
  static final updatedDate =
      obx.QueryDateProperty<Expenses>(_entities[5].properties[6]);
}

/// [Notifications] entity fields to define ObjectBox queries.
class Notifications_ {
  /// See [Notifications.notificationId].
  static final notificationId =
      obx.QueryIntegerProperty<Notifications>(_entities[6].properties[0]);

  /// See [Notifications.title].
  static final title =
      obx.QueryStringProperty<Notifications>(_entities[6].properties[1]);

  /// See [Notifications.description].
  static final description =
      obx.QueryStringProperty<Notifications>(_entities[6].properties[2]);

  /// See [Notifications.notificationType].
  static final notificationType =
      obx.QueryIntegerProperty<Notifications>(_entities[6].properties[3]);

  /// See [Notifications.readStatus].
  static final readStatus =
      obx.QueryIntegerProperty<Notifications>(_entities[6].properties[4]);

  /// See [Notifications.syncStatus].
  static final syncStatus =
      obx.QueryIntegerProperty<Notifications>(_entities[6].properties[5]);

  /// See [Notifications.status].
  static final status =
      obx.QueryIntegerProperty<Notifications>(_entities[6].properties[6]);

  /// See [Notifications.createdDate].
  static final createdDate =
      obx.QueryDateProperty<Notifications>(_entities[6].properties[7]);

  /// See [Notifications.updatedDate].
  static final updatedDate =
      obx.QueryDateProperty<Notifications>(_entities[6].properties[8]);
}
