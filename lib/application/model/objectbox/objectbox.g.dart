// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../app_setting.dart';
import '../category.dart';
import '../expense.dart';
import '../expense_goal.dart';
import '../expense_limit.dart';
import '../goal_saving_record.dart';
import '../money_account.dart';
import '../notification.dart';
import '../role.dart';
import '../user.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 8831631981163564566),
      name: 'Accounts',
      lastPropertyId: const obx_int.IdUid(6, 387416165700938719),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5180882146375394559),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 397003619378784218),
            name: 'accountName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7045148632975615978),
            name: 'accountIconHex',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 416109772411992719),
            name: 'status',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5039363868475206861),
            name: 'createdDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 387416165700938719),
            name: 'updatedDate',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 6201768374101372413),
      name: 'AppSetting',
      lastPropertyId: const obx_int.IdUid(9, 4902607547934781294),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5979634639836917208),
            name: 'settingId',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6911318319349245599),
            name: 'appName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4065995559216117837),
            name: 'appVersion',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8232594716266957023),
            name: 'appTheme',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5227247403229093035),
            name: 'appLanguage',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2626426787324476590),
            name: 'currencyIndicator',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6763704648403179344),
            name: 'isGoogleSignIn',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 5492694289983251058),
            name: 'monthlyLimit',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 4902607547934781294),
            name: 'endOfMonth',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 3961364298586900607),
      name: 'Category',
      lastPropertyId: const obx_int.IdUid(8, 420585335601318195),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2218805074034430348),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5713140838333165229),
            name: 'categoryName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1038135084941256854),
            name: 'categoryType',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 835635260221480048),
            name: 'status',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2618703127454663115),
            name: 'iconHex',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2336940634400116697),
            name: 'createdDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 7941756379631659755),
            name: 'updatedDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 420585335601318195),
            name: 'iconColor',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 4534934102677411721),
      name: 'ExpenseGoal',
      lastPropertyId: const obx_int.IdUid(11, 381579880899911153),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8338000965089772117),
            name: 'goalId',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8921528883465457003),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3323232228139074753),
            name: 'targetAmount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3199989839724077259),
            name: 'currentAmount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3476428828068737434),
            name: 'suggestedAmount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7560810394299395615),
            name: 'syncStatus',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6630825440088857507),
            name: 'status',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 8013781399418449793),
            name: 'iconHex',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 4019762431714004138),
            name: 'dueDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 5618196357035166189),
            name: 'createdDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 381579880899911153),
            name: 'updatedDate',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 3915113440588879879),
      name: 'ExpenseLimit',
      lastPropertyId: const obx_int.IdUid(7, 1760855111505531199),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8487955229677299339),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1605329259369639171),
            name: 'amount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7937797141721335933),
            name: 'syncStatus',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4839540149764770088),
            name: 'status',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6149662425678660402),
            name: 'createdDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5769774472417219429),
            name: 'updatedDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 1760855111505531199),
            name: 'categoryId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 8484504409011527702),
            relationTarget: 'Category')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 2586405243027039439),
      name: 'Expenses',
      lastPropertyId: const obx_int.IdUid(12, 2066450318329884078),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1219160756862167023),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1229137720707926926),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4843363732142582742),
            name: 'amount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6816788121227032144),
            name: 'expensesType',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6257780831733842307),
            name: 'syncStatus',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2104214837932862588),
            name: 'status',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3693005070745352971),
            name: 'image',
            type: 23,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 8178627947658696945),
            name: 'expensesDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 3201147166477665067),
            name: 'createdDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 8065953034057317868),
            name: 'updatedDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 5760984858242030710),
            name: 'categoryId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 2917102714203233712),
            relationTarget: 'Category'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 2066450318329884078),
            name: 'accountId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(3, 4467550523843549598),
            relationTarget: 'Accounts')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(7, 4261467687947724344),
      name: 'GoalSavingRecord',
      lastPropertyId: const obx_int.IdUid(8, 7907730562010767553),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3661676337403182526),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 286823983775164709),
            name: 'amount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6422204735411503291),
            name: 'syncStatus',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5394605513634455936),
            name: 'status',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4116026955628714257),
            name: 'savingDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2043670807173840483),
            name: 'createdDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2352375085640225694),
            name: 'updatedDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 7907730562010767553),
            name: 'goalId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(4, 1730564694065716900),
            relationTarget: 'ExpenseGoal')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(8, 7814358593916956067),
      name: 'Notifications',
      lastPropertyId: const obx_int.IdUid(9, 3490259122417608946),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 102040439090178306),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4993199727894025869),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6140657526780349943),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1184257347881519880),
            name: 'notificationType',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7499854972294451633),
            name: 'readStatus',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5718875669535315610),
            name: 'syncStatus',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3520389999176356839),
            name: 'status',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 3780168778186242332),
            name: 'createdDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 3490259122417608946),
            name: 'updatedDate',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(9, 7442420670389246314),
      name: 'Role',
      lastPropertyId: const obx_int.IdUid(2, 732545084370248892),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6072273285299619729),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 732545084370248892),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(10, 3740479605036880904),
      name: 'Users',
      lastPropertyId: const obx_int.IdUid(10, 1782599207046031135),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3707100353684752341),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1138109514961642769),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3723726827519881689),
            name: 'email',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6614765837359399758),
            name: 'password',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1814130637057256921),
            name: 'status',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5555044462861548429),
            name: 'discordId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 7419769678124107579),
            name: 'profilePictureUrl',
            type: 23,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 2649542640602541047),
            name: 'createdDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 7459262265387015857),
            name: 'updatedDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 1782599207046031135),
            name: 'roleId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(5, 6438922736877695870),
            relationTarget: 'Role')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(10, 3740479605036880904),
      lastIndexId: const obx_int.IdUid(5, 6438922736877695870),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Accounts: obx_int.EntityDefinition<Accounts>(
        model: _entities[0],
        toOneRelations: (Accounts object) => [],
        toManyRelations: (Accounts object) => {},
        getId: (Accounts object) => object.id,
        setId: (Accounts object, int id) {
          object.id = id;
        },
        objectToFB: (Accounts object, fb.Builder fbb) {
          final accountNameOffset = fbb.writeString(object.accountName);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, accountNameOffset);
          fbb.addInt64(2, object.accountIconHex);
          fbb.addInt64(3, object.status);
          fbb.addInt64(4, object.createdDate.millisecondsSinceEpoch);
          fbb.addInt64(5, object.updatedDate.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final accountNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final statusParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final object = Accounts(
              accountName: accountNameParam, status: statusParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..accountIconHex =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)
            ..createdDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0))
            ..updatedDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));

          return object;
        }),
    AppSetting: obx_int.EntityDefinition<AppSetting>(
        model: _entities[1],
        toOneRelations: (AppSetting object) => [],
        toManyRelations: (AppSetting object) => {},
        getId: (AppSetting object) => object.settingId,
        setId: (AppSetting object, int id) {
          object.settingId = id;
        },
        objectToFB: (AppSetting object, fb.Builder fbb) {
          final appNameOffset = fbb.writeString(object.appName);
          final appVersionOffset = fbb.writeString(object.appVersion);
          final appThemeOffset = fbb.writeString(object.appTheme);
          final appLanguageOffset = fbb.writeString(object.appLanguage);
          final currencyIndicatorOffset =
              fbb.writeString(object.currencyIndicator);
          fbb.startTable(10);
          fbb.addInt64(0, object.settingId);
          fbb.addOffset(1, appNameOffset);
          fbb.addOffset(2, appVersionOffset);
          fbb.addOffset(3, appThemeOffset);
          fbb.addOffset(4, appLanguageOffset);
          fbb.addOffset(5, currencyIndicatorOffset);
          fbb.addBool(6, object.isGoogleSignIn);
          fbb.addFloat64(7, object.monthlyLimit);
          fbb.addInt64(8, object.endOfMonth);
          fbb.finish(fbb.endTable());
          return object.settingId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = AppSetting()
            ..settingId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..appName = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..appVersion = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..appTheme = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 10, '')
            ..appLanguage = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 12, '')
            ..currencyIndicator = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 14, '')
            ..isGoogleSignIn =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 16, false)
            ..monthlyLimit =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 18, 0)
            ..endOfMonth =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);

          return object;
        }),
    Category: obx_int.EntityDefinition<Category>(
        model: _entities[2],
        toOneRelations: (Category object) => [],
        toManyRelations: (Category object) => {},
        getId: (Category object) => object.id,
        setId: (Category object, int id) {
          object.id = id;
        },
        objectToFB: (Category object, fb.Builder fbb) {
          final categoryNameOffset = fbb.writeString(object.categoryName);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, categoryNameOffset);
          fbb.addInt64(2, object.categoryType);
          fbb.addInt64(3, object.status);
          fbb.addInt64(4, object.iconHex);
          fbb.addInt64(5, object.createdDate.millisecondsSinceEpoch);
          fbb.addInt64(6, object.updatedDate.millisecondsSinceEpoch);
          fbb.addInt64(7, object.iconColor);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Category()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..categoryName = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..categoryType =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)
            ..status =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)
            ..iconHex =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)
            ..createdDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0))
            ..updatedDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0))
            ..iconColor =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);

          return object;
        }),
    ExpenseGoal: obx_int.EntityDefinition<ExpenseGoal>(
        model: _entities[3],
        toOneRelations: (ExpenseGoal object) => [],
        toManyRelations: (ExpenseGoal object) => {},
        getId: (ExpenseGoal object) => object.goalId,
        setId: (ExpenseGoal object, int id) {
          object.goalId = id;
        },
        objectToFB: (ExpenseGoal object, fb.Builder fbb) {
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(12);
          fbb.addInt64(0, object.goalId);
          fbb.addOffset(1, descriptionOffset);
          fbb.addFloat64(2, object.targetAmount);
          fbb.addFloat64(3, object.currentAmount);
          fbb.addFloat64(4, object.suggestedAmount);
          fbb.addInt64(5, object.syncStatus);
          fbb.addInt64(6, object.status);
          fbb.addInt64(7, object.iconHex);
          fbb.addInt64(8, object.dueDate?.millisecondsSinceEpoch);
          fbb.addInt64(9, object.createdDate.millisecondsSinceEpoch);
          fbb.addInt64(10, object.updatedDate.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.goalId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dueDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final dueDateParam = dueDateValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(dueDateValue);
          final object = ExpenseGoal(dueDate: dueDateParam)
            ..goalId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..description = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..targetAmount =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0)
            ..currentAmount =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0)
            ..suggestedAmount =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0)
            ..syncStatus =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)
            ..status =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0)
            ..iconHex =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0)
            ..createdDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0))
            ..updatedDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0));

          return object;
        }),
    ExpenseLimit: obx_int.EntityDefinition<ExpenseLimit>(
        model: _entities[4],
        toOneRelations: (ExpenseLimit object) => [object.category],
        toManyRelations: (ExpenseLimit object) => {},
        getId: (ExpenseLimit object) => object.id,
        setId: (ExpenseLimit object, int id) {
          object.id = id;
        },
        objectToFB: (ExpenseLimit object, fb.Builder fbb) {
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(1, object.amount);
          fbb.addInt64(2, object.syncStatus);
          fbb.addInt64(3, object.status);
          fbb.addInt64(4, object.createdDate.millisecondsSinceEpoch);
          fbb.addInt64(5, object.updatedDate.millisecondsSinceEpoch);
          fbb.addInt64(6, object.category.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ExpenseLimit()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..amount =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 6, 0)
            ..syncStatus =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)
            ..status =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)
            ..createdDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0))
            ..updatedDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));
          object.category.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.category.attach(store);
          return object;
        }),
    Expenses: obx_int.EntityDefinition<Expenses>(
        model: _entities[5],
        toOneRelations: (Expenses object) => [object.category, object.account],
        toManyRelations: (Expenses object) => {},
        getId: (Expenses object) => object.id,
        setId: (Expenses object, int id) {
          object.id = id;
        },
        objectToFB: (Expenses object, fb.Builder fbb) {
          final descriptionOffset = fbb.writeString(object.description);
          final imageOffset =
              object.image == null ? null : fbb.writeListInt8(object.image!);
          fbb.startTable(13);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, descriptionOffset);
          fbb.addFloat64(2, object.amount);
          fbb.addInt64(3, object.expensesType);
          fbb.addInt64(4, object.syncStatus);
          fbb.addInt64(5, object.status);
          fbb.addOffset(6, imageOffset);
          fbb.addInt64(7, object.expensesDate.millisecondsSinceEpoch);
          fbb.addInt64(8, object.createdDate.millisecondsSinceEpoch);
          fbb.addInt64(9, object.updatedDate.millisecondsSinceEpoch);
          fbb.addInt64(10, object.category.targetId);
          fbb.addInt64(11, object.account.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Expenses()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..description = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..amount =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0)
            ..expensesType =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)
            ..syncStatus =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)
            ..status =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)
            ..image = const fb.Uint8ListReader(lazy: false)
                .vTableGetNullable(buffer, rootOffset, 16) as Uint8List?
            ..expensesDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0))
            ..createdDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0))
            ..updatedDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0));
          object.category.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.category.attach(store);
          object.account.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.account.attach(store);
          return object;
        }),
    GoalSavingRecord: obx_int.EntityDefinition<GoalSavingRecord>(
        model: _entities[6],
        toOneRelations: (GoalSavingRecord object) => [object.goal],
        toManyRelations: (GoalSavingRecord object) => {},
        getId: (GoalSavingRecord object) => object.id,
        setId: (GoalSavingRecord object, int id) {
          object.id = id;
        },
        objectToFB: (GoalSavingRecord object, fb.Builder fbb) {
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(1, object.amount);
          fbb.addInt64(2, object.syncStatus);
          fbb.addInt64(3, object.status);
          fbb.addInt64(4, object.savingDate.millisecondsSinceEpoch);
          fbb.addInt64(5, object.createdDate.millisecondsSinceEpoch);
          fbb.addInt64(6, object.updatedDate.millisecondsSinceEpoch);
          fbb.addInt64(7, object.goal.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = GoalSavingRecord()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..amount =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 6, 0)
            ..syncStatus =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)
            ..status =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)
            ..savingDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0))
            ..createdDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0))
            ..updatedDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0));
          object.goal.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.goal.attach(store);
          return object;
        }),
    Notifications: obx_int.EntityDefinition<Notifications>(
        model: _entities[7],
        toOneRelations: (Notifications object) => [],
        toManyRelations: (Notifications object) => {},
        getId: (Notifications object) => object.id,
        setId: (Notifications object, int id) {
          object.id = id;
        },
        objectToFB: (Notifications object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addInt64(3, object.notificationType);
          fbb.addInt64(4, object.readStatus);
          fbb.addInt64(5, object.syncStatus);
          fbb.addInt64(6, object.status);
          fbb.addInt64(7, object.createdDate.millisecondsSinceEpoch);
          fbb.addInt64(8, object.updatedDate.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Notifications()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..title = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..description = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..notificationType =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)
            ..readStatus =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)
            ..syncStatus =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)
            ..status =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0)
            ..createdDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0))
            ..updatedDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0));

          return object;
        }),
    Role: obx_int.EntityDefinition<Role>(
        model: _entities[8],
        toOneRelations: (Role object) => [],
        toManyRelations: (Role object) => {},
        getId: (Role object) => object.id,
        setId: (Role object, int id) {
          object.id = id;
        },
        objectToFB: (Role object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Role()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '');

          return object;
        }),
    Users: obx_int.EntityDefinition<Users>(
        model: _entities[9],
        toOneRelations: (Users object) => [object.role],
        toManyRelations: (Users object) => {},
        getId: (Users object) => object.id,
        setId: (Users object, int id) {
          object.id = id;
        },
        objectToFB: (Users object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final emailOffset = fbb.writeString(object.email);
          final passwordOffset = fbb.writeString(object.password);
          final discordIdOffset = fbb.writeString(object.discordId);
          final profilePictureUrlOffset = object.profilePictureUrl == null
              ? null
              : fbb.writeListInt8(object.profilePictureUrl!);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, emailOffset);
          fbb.addOffset(3, passwordOffset);
          fbb.addInt64(4, object.status);
          fbb.addOffset(5, discordIdOffset);
          fbb.addOffset(6, profilePictureUrlOffset);
          fbb.addInt64(7, object.createdDate.millisecondsSinceEpoch);
          fbb.addInt64(8, object.updatedDate.millisecondsSinceEpoch);
          fbb.addInt64(9, object.role.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Users()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..email = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..password = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 10, '')
            ..status =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)
            ..discordId = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 14, '')
            ..profilePictureUrl = const fb.Uint8ListReader(lazy: false)
                .vTableGetNullable(buffer, rootOffset, 16) as Uint8List?
            ..createdDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0))
            ..updatedDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0));
          object.role.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.role.attach(store);
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Accounts] entity fields to define ObjectBox queries.
class Accounts_ {
  /// See [Accounts.id].
  static final id =
      obx.QueryIntegerProperty<Accounts>(_entities[0].properties[0]);

  /// See [Accounts.accountName].
  static final accountName =
      obx.QueryStringProperty<Accounts>(_entities[0].properties[1]);

  /// See [Accounts.accountIconHex].
  static final accountIconHex =
      obx.QueryIntegerProperty<Accounts>(_entities[0].properties[2]);

  /// See [Accounts.status].
  static final status =
      obx.QueryIntegerProperty<Accounts>(_entities[0].properties[3]);

  /// See [Accounts.createdDate].
  static final createdDate =
      obx.QueryDateProperty<Accounts>(_entities[0].properties[4]);

  /// See [Accounts.updatedDate].
  static final updatedDate =
      obx.QueryDateProperty<Accounts>(_entities[0].properties[5]);
}

/// [AppSetting] entity fields to define ObjectBox queries.
class AppSetting_ {
  /// See [AppSetting.settingId].
  static final settingId =
      obx.QueryIntegerProperty<AppSetting>(_entities[1].properties[0]);

  /// See [AppSetting.appName].
  static final appName =
      obx.QueryStringProperty<AppSetting>(_entities[1].properties[1]);

  /// See [AppSetting.appVersion].
  static final appVersion =
      obx.QueryStringProperty<AppSetting>(_entities[1].properties[2]);

  /// See [AppSetting.appTheme].
  static final appTheme =
      obx.QueryStringProperty<AppSetting>(_entities[1].properties[3]);

  /// See [AppSetting.appLanguage].
  static final appLanguage =
      obx.QueryStringProperty<AppSetting>(_entities[1].properties[4]);

  /// See [AppSetting.currencyIndicator].
  static final currencyIndicator =
      obx.QueryStringProperty<AppSetting>(_entities[1].properties[5]);

  /// See [AppSetting.isGoogleSignIn].
  static final isGoogleSignIn =
      obx.QueryBooleanProperty<AppSetting>(_entities[1].properties[6]);

  /// See [AppSetting.monthlyLimit].
  static final monthlyLimit =
      obx.QueryDoubleProperty<AppSetting>(_entities[1].properties[7]);

  /// See [AppSetting.endOfMonth].
  static final endOfMonth =
      obx.QueryIntegerProperty<AppSetting>(_entities[1].properties[8]);
}

/// [Category] entity fields to define ObjectBox queries.
class Category_ {
  /// See [Category.id].
  static final id =
      obx.QueryIntegerProperty<Category>(_entities[2].properties[0]);

  /// See [Category.categoryName].
  static final categoryName =
      obx.QueryStringProperty<Category>(_entities[2].properties[1]);

  /// See [Category.categoryType].
  static final categoryType =
      obx.QueryIntegerProperty<Category>(_entities[2].properties[2]);

  /// See [Category.status].
  static final status =
      obx.QueryIntegerProperty<Category>(_entities[2].properties[3]);

  /// See [Category.iconHex].
  static final iconHex =
      obx.QueryIntegerProperty<Category>(_entities[2].properties[4]);

  /// See [Category.createdDate].
  static final createdDate =
      obx.QueryDateProperty<Category>(_entities[2].properties[5]);

  /// See [Category.updatedDate].
  static final updatedDate =
      obx.QueryDateProperty<Category>(_entities[2].properties[6]);

  /// See [Category.iconColor].
  static final iconColor =
      obx.QueryIntegerProperty<Category>(_entities[2].properties[7]);
}

/// [ExpenseGoal] entity fields to define ObjectBox queries.
class ExpenseGoal_ {
  /// See [ExpenseGoal.goalId].
  static final goalId =
      obx.QueryIntegerProperty<ExpenseGoal>(_entities[3].properties[0]);

  /// See [ExpenseGoal.description].
  static final description =
      obx.QueryStringProperty<ExpenseGoal>(_entities[3].properties[1]);

  /// See [ExpenseGoal.targetAmount].
  static final targetAmount =
      obx.QueryDoubleProperty<ExpenseGoal>(_entities[3].properties[2]);

  /// See [ExpenseGoal.currentAmount].
  static final currentAmount =
      obx.QueryDoubleProperty<ExpenseGoal>(_entities[3].properties[3]);

  /// See [ExpenseGoal.suggestedAmount].
  static final suggestedAmount =
      obx.QueryDoubleProperty<ExpenseGoal>(_entities[3].properties[4]);

  /// See [ExpenseGoal.syncStatus].
  static final syncStatus =
      obx.QueryIntegerProperty<ExpenseGoal>(_entities[3].properties[5]);

  /// See [ExpenseGoal.status].
  static final status =
      obx.QueryIntegerProperty<ExpenseGoal>(_entities[3].properties[6]);

  /// See [ExpenseGoal.iconHex].
  static final iconHex =
      obx.QueryIntegerProperty<ExpenseGoal>(_entities[3].properties[7]);

  /// See [ExpenseGoal.dueDate].
  static final dueDate =
      obx.QueryDateProperty<ExpenseGoal>(_entities[3].properties[8]);

  /// See [ExpenseGoal.createdDate].
  static final createdDate =
      obx.QueryDateProperty<ExpenseGoal>(_entities[3].properties[9]);

  /// See [ExpenseGoal.updatedDate].
  static final updatedDate =
      obx.QueryDateProperty<ExpenseGoal>(_entities[3].properties[10]);
}

/// [ExpenseLimit] entity fields to define ObjectBox queries.
class ExpenseLimit_ {
  /// See [ExpenseLimit.id].
  static final id =
      obx.QueryIntegerProperty<ExpenseLimit>(_entities[4].properties[0]);

  /// See [ExpenseLimit.amount].
  static final amount =
      obx.QueryDoubleProperty<ExpenseLimit>(_entities[4].properties[1]);

  /// See [ExpenseLimit.syncStatus].
  static final syncStatus =
      obx.QueryIntegerProperty<ExpenseLimit>(_entities[4].properties[2]);

  /// See [ExpenseLimit.status].
  static final status =
      obx.QueryIntegerProperty<ExpenseLimit>(_entities[4].properties[3]);

  /// See [ExpenseLimit.createdDate].
  static final createdDate =
      obx.QueryDateProperty<ExpenseLimit>(_entities[4].properties[4]);

  /// See [ExpenseLimit.updatedDate].
  static final updatedDate =
      obx.QueryDateProperty<ExpenseLimit>(_entities[4].properties[5]);

  /// See [ExpenseLimit.category].
  static final category = obx.QueryRelationToOne<ExpenseLimit, Category>(
      _entities[4].properties[6]);
}

/// [Expenses] entity fields to define ObjectBox queries.
class Expenses_ {
  /// See [Expenses.id].
  static final id =
      obx.QueryIntegerProperty<Expenses>(_entities[5].properties[0]);

  /// See [Expenses.description].
  static final description =
      obx.QueryStringProperty<Expenses>(_entities[5].properties[1]);

  /// See [Expenses.amount].
  static final amount =
      obx.QueryDoubleProperty<Expenses>(_entities[5].properties[2]);

  /// See [Expenses.expensesType].
  static final expensesType =
      obx.QueryIntegerProperty<Expenses>(_entities[5].properties[3]);

  /// See [Expenses.syncStatus].
  static final syncStatus =
      obx.QueryIntegerProperty<Expenses>(_entities[5].properties[4]);

  /// See [Expenses.status].
  static final status =
      obx.QueryIntegerProperty<Expenses>(_entities[5].properties[5]);

  /// See [Expenses.image].
  static final image =
      obx.QueryByteVectorProperty<Expenses>(_entities[5].properties[6]);

  /// See [Expenses.expensesDate].
  static final expensesDate =
      obx.QueryDateProperty<Expenses>(_entities[5].properties[7]);

  /// See [Expenses.createdDate].
  static final createdDate =
      obx.QueryDateProperty<Expenses>(_entities[5].properties[8]);

  /// See [Expenses.updatedDate].
  static final updatedDate =
      obx.QueryDateProperty<Expenses>(_entities[5].properties[9]);

  /// See [Expenses.category].
  static final category =
      obx.QueryRelationToOne<Expenses, Category>(_entities[5].properties[10]);

  /// See [Expenses.account].
  static final account =
      obx.QueryRelationToOne<Expenses, Accounts>(_entities[5].properties[11]);
}

/// [GoalSavingRecord] entity fields to define ObjectBox queries.
class GoalSavingRecord_ {
  /// See [GoalSavingRecord.id].
  static final id =
      obx.QueryIntegerProperty<GoalSavingRecord>(_entities[6].properties[0]);

  /// See [GoalSavingRecord.amount].
  static final amount =
      obx.QueryDoubleProperty<GoalSavingRecord>(_entities[6].properties[1]);

  /// See [GoalSavingRecord.syncStatus].
  static final syncStatus =
      obx.QueryIntegerProperty<GoalSavingRecord>(_entities[6].properties[2]);

  /// See [GoalSavingRecord.status].
  static final status =
      obx.QueryIntegerProperty<GoalSavingRecord>(_entities[6].properties[3]);

  /// See [GoalSavingRecord.savingDate].
  static final savingDate =
      obx.QueryDateProperty<GoalSavingRecord>(_entities[6].properties[4]);

  /// See [GoalSavingRecord.createdDate].
  static final createdDate =
      obx.QueryDateProperty<GoalSavingRecord>(_entities[6].properties[5]);

  /// See [GoalSavingRecord.updatedDate].
  static final updatedDate =
      obx.QueryDateProperty<GoalSavingRecord>(_entities[6].properties[6]);

  /// See [GoalSavingRecord.goal].
  static final goal = obx.QueryRelationToOne<GoalSavingRecord, ExpenseGoal>(
      _entities[6].properties[7]);
}

/// [Notifications] entity fields to define ObjectBox queries.
class Notifications_ {
  /// See [Notifications.id].
  static final id =
      obx.QueryIntegerProperty<Notifications>(_entities[7].properties[0]);

  /// See [Notifications.title].
  static final title =
      obx.QueryStringProperty<Notifications>(_entities[7].properties[1]);

  /// See [Notifications.description].
  static final description =
      obx.QueryStringProperty<Notifications>(_entities[7].properties[2]);

  /// See [Notifications.notificationType].
  static final notificationType =
      obx.QueryIntegerProperty<Notifications>(_entities[7].properties[3]);

  /// See [Notifications.readStatus].
  static final readStatus =
      obx.QueryIntegerProperty<Notifications>(_entities[7].properties[4]);

  /// See [Notifications.syncStatus].
  static final syncStatus =
      obx.QueryIntegerProperty<Notifications>(_entities[7].properties[5]);

  /// See [Notifications.status].
  static final status =
      obx.QueryIntegerProperty<Notifications>(_entities[7].properties[6]);

  /// See [Notifications.createdDate].
  static final createdDate =
      obx.QueryDateProperty<Notifications>(_entities[7].properties[7]);

  /// See [Notifications.updatedDate].
  static final updatedDate =
      obx.QueryDateProperty<Notifications>(_entities[7].properties[8]);
}

/// [Role] entity fields to define ObjectBox queries.
class Role_ {
  /// See [Role.id].
  static final id = obx.QueryIntegerProperty<Role>(_entities[8].properties[0]);

  /// See [Role.name].
  static final name = obx.QueryStringProperty<Role>(_entities[8].properties[1]);
}

/// [Users] entity fields to define ObjectBox queries.
class Users_ {
  /// See [Users.id].
  static final id = obx.QueryIntegerProperty<Users>(_entities[9].properties[0]);

  /// See [Users.name].
  static final name =
      obx.QueryStringProperty<Users>(_entities[9].properties[1]);

  /// See [Users.email].
  static final email =
      obx.QueryStringProperty<Users>(_entities[9].properties[2]);

  /// See [Users.password].
  static final password =
      obx.QueryStringProperty<Users>(_entities[9].properties[3]);

  /// See [Users.status].
  static final status =
      obx.QueryIntegerProperty<Users>(_entities[9].properties[4]);

  /// See [Users.discordId].
  static final discordId =
      obx.QueryStringProperty<Users>(_entities[9].properties[5]);

  /// See [Users.profilePictureUrl].
  static final profilePictureUrl =
      obx.QueryByteVectorProperty<Users>(_entities[9].properties[6]);

  /// See [Users.createdDate].
  static final createdDate =
      obx.QueryDateProperty<Users>(_entities[9].properties[7]);

  /// See [Users.updatedDate].
  static final updatedDate =
      obx.QueryDateProperty<Users>(_entities[9].properties[8]);

  /// See [Users.role].
  static final role =
      obx.QueryRelationToOne<Users, Role>(_entities[9].properties[9]);
}
