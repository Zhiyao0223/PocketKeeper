// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../app_setting.dart';
import '../category.dart';
import '../expense.dart';
import '../expense_goal.dart';
import '../expense_limit.dart';
import '../financial_blog.dart';
import '../goal_saving_record.dart';
import '../money_account.dart';
import '../notification.dart';
import '../role.dart';
import '../user.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 3946258260150009789),
      name: 'Accounts',
      lastPropertyId: const obx_int.IdUid(6, 7627001926983520081),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3770429856121699841),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8204523061755171620),
            name: 'accountName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3675015443363442088),
            name: 'accountIconHex',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3730075293372012418),
            name: 'status',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1841910785157987325),
            name: 'createdDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7627001926983520081),
            name: 'updatedDate',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 1214418274414934954),
      name: 'AppSetting',
      lastPropertyId: const obx_int.IdUid(15, 5360970977266232975),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1479068672393645875),
            name: 'settingId',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5065434256474367923),
            name: 'appName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 957614256141810490),
            name: 'appVersion',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3226688190570224471),
            name: 'appTheme',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 462554940343123181),
            name: 'appLanguage',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3020046527841200826),
            name: 'currencyIndicator',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3256188628124908557),
            name: 'currencyCode',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 7992504173241742917),
            name: 'isNotificationOn',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 5941662823636418323),
            name: 'isGoogleSignIn',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 1594419249498785413),
            name: 'isBiometricOn',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 7287367025736021099),
            name: 'lastBackupDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 3459556488290736486),
            name: 'lastRestoreDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 2022133039333774452),
            name: 'lastResyncDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 4712086301905975408),
            name: 'monthlyLimit',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 5360970977266232975),
            name: 'endOfMonth',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 2722244879870807125),
      name: 'Category',
      lastPropertyId: const obx_int.IdUid(8, 65070153655724951),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7239775552397938733),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5427255481783507113),
            name: 'categoryName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1424582743761516652),
            name: 'categoryType',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7374666867932114440),
            name: 'status',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1657372633069474072),
            name: 'iconHex',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7100320256906723350),
            name: 'createdDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 7921159731743172087),
            name: 'updatedDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 65070153655724951),
            name: 'iconColor',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 6887971957474923860),
      name: 'ExpenseGoal',
      lastPropertyId: const obx_int.IdUid(11, 3151570846071934438),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8750860319268015159),
            name: 'goalId',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1863829849373859969),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8801750045992928864),
            name: 'targetAmount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7730801910548592148),
            name: 'currentAmount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7684677424851607978),
            name: 'suggestedAmount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 497921829839770650),
            name: 'syncStatus',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2646966000019756546),
            name: 'status',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 8921846039900876403),
            name: 'iconHex',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 3062200242844760932),
            name: 'dueDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 1222971518611244331),
            name: 'createdDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 3151570846071934438),
            name: 'updatedDate',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 4779484106646958421),
      name: 'ExpenseLimit',
      lastPropertyId: const obx_int.IdUid(7, 3633911054337317945),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8662104256467221391),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3755525712112759243),
            name: 'amount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6506883909378709095),
            name: 'syncStatus',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8456738448464979984),
            name: 'status',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3083848338840787231),
            name: 'createdDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7235796167512725018),
            name: 'updatedDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3633911054337317945),
            name: 'categoryId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 4238982545829411985),
            relationTarget: 'Category')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 2902253124223713629),
      name: 'Expenses',
      lastPropertyId: const obx_int.IdUid(13, 8324775289860297862),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4282547080289154281),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1292786182380089894),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3525617642955794431),
            name: 'amount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1884131476566699806),
            name: 'expensesType',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 755018397686640398),
            name: 'syncStatus',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5334703028965724725),
            name: 'status',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6555695804038453358),
            name: 'image',
            type: 23,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 3372469083616505503),
            name: 'expensesDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 2842873679174705846),
            name: 'createdDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 3309606577735244594),
            name: 'updatedDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 8186125922971168643),
            name: 'userId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 8493691159575295866),
            relationTarget: 'Users'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 4309597204863682954),
            name: 'categoryId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(3, 8035732500895595908),
            relationTarget: 'Category'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 8324775289860297862),
            name: 'accountId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(4, 379776221725294393),
            relationTarget: 'Accounts')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(7, 3948717632498652046),
      name: 'FinancialBlog',
      lastPropertyId: const obx_int.IdUid(10, 6061410565485695316),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8683753329878556293),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3671892199184674806),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7511103514544376348),
            name: 'author',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7586907494330818567),
            name: 'blogImage',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7449737967722689850),
            name: 'authorImage',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3745838826494226106),
            name: 'url',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3042123490924172089),
            name: 'averageReadingTime',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 3074599147504856275),
            name: 'status',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 819066825141840527),
            name: 'createdDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 6061410565485695316),
            name: 'updatedDate',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(8, 1313219190193958349),
      name: 'GoalSavingRecord',
      lastPropertyId: const obx_int.IdUid(8, 3820270127696912683),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3397856786200724441),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8673984298150175511),
            name: 'amount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4841032113556409274),
            name: 'syncStatus',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 2729476951933725061),
            name: 'status',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6760441492780958049),
            name: 'savingDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1919687060516315720),
            name: 'createdDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 4672985925219318330),
            name: 'updatedDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 3820270127696912683),
            name: 'goalId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(5, 7692226282830274472),
            relationTarget: 'ExpenseGoal')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(9, 3904425662853525887),
      name: 'Notifications',
      lastPropertyId: const obx_int.IdUid(9, 8070072530019871733),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4413624460803791459),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8794538528768438160),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6395852255627118377),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1386051919656253148),
            name: 'notificationType',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2744144886445491100),
            name: 'readStatus',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7595907692796511182),
            name: 'syncStatus',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 7770497388433539461),
            name: 'status',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 976917115269297340),
            name: 'createdDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 8070072530019871733),
            name: 'updatedDate',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(10, 8429665522372047822),
      name: 'Role',
      lastPropertyId: const obx_int.IdUid(2, 6690719830633852117),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8165634404208937109),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6690719830633852117),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(11, 5434009497011253653),
      name: 'Users',
      lastPropertyId: const obx_int.IdUid(10, 7521314351920567776),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8647911724785353922),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6595810415986620228),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7925426086612224153),
            name: 'email',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1197902587569256119),
            name: 'password',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1995432302617775811),
            name: 'status',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3495738903195543361),
            name: 'discordId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 611197567894375873),
            name: 'profilePicture',
            type: 23,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 5768010969116047470),
            name: 'createdDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 3717623402806237229),
            name: 'updatedDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 7521314351920567776),
            name: 'roleId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(6, 1308156906433100350),
            relationTarget: 'Role')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(11, 5434009497011253653),
      lastIndexId: const obx_int.IdUid(6, 1308156906433100350),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Accounts: obx_int.EntityDefinition<Accounts>(
        model: _entities[0],
        toOneRelations: (Accounts object) => [],
        toManyRelations: (Accounts object) => {},
        getId: (Accounts object) => object.id,
        setId: (Accounts object, int id) {
          object.id = id;
        },
        objectToFB: (Accounts object, fb.Builder fbb) {
          final accountNameOffset = fbb.writeString(object.accountName);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, accountNameOffset);
          fbb.addInt64(2, object.accountIconHex);
          fbb.addInt64(3, object.status);
          fbb.addInt64(4, object.createdDate.millisecondsSinceEpoch);
          fbb.addInt64(5, object.updatedDate.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final accountNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final statusParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final object = Accounts(
              accountName: accountNameParam, status: statusParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..accountIconHex =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)
            ..createdDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0))
            ..updatedDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));

          return object;
        }),
    AppSetting: obx_int.EntityDefinition<AppSetting>(
        model: _entities[1],
        toOneRelations: (AppSetting object) => [],
        toManyRelations: (AppSetting object) => {},
        getId: (AppSetting object) => object.settingId,
        setId: (AppSetting object, int id) {
          object.settingId = id;
        },
        objectToFB: (AppSetting object, fb.Builder fbb) {
          final appNameOffset = fbb.writeString(object.appName);
          final appVersionOffset = fbb.writeString(object.appVersion);
          final appThemeOffset = fbb.writeString(object.appTheme);
          final appLanguageOffset = fbb.writeString(object.appLanguage);
          final currencyIndicatorOffset =
              fbb.writeString(object.currencyIndicator);
          final currencyCodeOffset = fbb.writeString(object.currencyCode);
          fbb.startTable(16);
          fbb.addInt64(0, object.settingId);
          fbb.addOffset(1, appNameOffset);
          fbb.addOffset(2, appVersionOffset);
          fbb.addOffset(3, appThemeOffset);
          fbb.addOffset(4, appLanguageOffset);
          fbb.addOffset(5, currencyIndicatorOffset);
          fbb.addOffset(6, currencyCodeOffset);
          fbb.addBool(7, object.isNotificationOn);
          fbb.addBool(8, object.isGoogleSignIn);
          fbb.addBool(9, object.isBiometricOn);
          fbb.addInt64(10, object.lastBackupDate?.millisecondsSinceEpoch);
          fbb.addInt64(11, object.lastRestoreDate?.millisecondsSinceEpoch);
          fbb.addInt64(12, object.lastResyncDate?.millisecondsSinceEpoch);
          fbb.addFloat64(13, object.monthlyLimit);
          fbb.addInt64(14, object.endOfMonth);
          fbb.finish(fbb.endTable());
          return object.settingId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final lastBackupDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 24);
          final lastRestoreDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 26);
          final lastResyncDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 28);
          final object = AppSetting()
            ..settingId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..appName = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..appVersion = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..appTheme = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 10, '')
            ..appLanguage = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 12, '')
            ..currencyIndicator = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 14, '')
            ..currencyCode = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 16, '')
            ..isNotificationOn =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 18, false)
            ..isGoogleSignIn =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 20, false)
            ..isBiometricOn =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 22, false)
            ..lastBackupDate = lastBackupDateValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(lastBackupDateValue)
            ..lastRestoreDate = lastRestoreDateValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(lastRestoreDateValue)
            ..lastResyncDate = lastResyncDateValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(lastResyncDateValue)
            ..monthlyLimit =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 30, 0)
            ..endOfMonth =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 32, 0);

          return object;
        }),
    Category: obx_int.EntityDefinition<Category>(
        model: _entities[2],
        toOneRelations: (Category object) => [],
        toManyRelations: (Category object) => {},
        getId: (Category object) => object.id,
        setId: (Category object, int id) {
          object.id = id;
        },
        objectToFB: (Category object, fb.Builder fbb) {
          final categoryNameOffset = fbb.writeString(object.categoryName);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, categoryNameOffset);
          fbb.addInt64(2, object.categoryType);
          fbb.addInt64(3, object.status);
          fbb.addInt64(4, object.iconHex);
          fbb.addInt64(5, object.createdDate.millisecondsSinceEpoch);
          fbb.addInt64(6, object.updatedDate.millisecondsSinceEpoch);
          fbb.addInt64(7, object.iconColor);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Category()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..categoryName = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..categoryType =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)
            ..status =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)
            ..iconHex =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)
            ..createdDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0))
            ..updatedDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0))
            ..iconColor =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);

          return object;
        }),
    ExpenseGoal: obx_int.EntityDefinition<ExpenseGoal>(
        model: _entities[3],
        toOneRelations: (ExpenseGoal object) => [],
        toManyRelations: (ExpenseGoal object) => {},
        getId: (ExpenseGoal object) => object.goalId,
        setId: (ExpenseGoal object, int id) {
          object.goalId = id;
        },
        objectToFB: (ExpenseGoal object, fb.Builder fbb) {
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(12);
          fbb.addInt64(0, object.goalId);
          fbb.addOffset(1, descriptionOffset);
          fbb.addFloat64(2, object.targetAmount);
          fbb.addFloat64(3, object.currentAmount);
          fbb.addFloat64(4, object.suggestedAmount);
          fbb.addInt64(5, object.syncStatus);
          fbb.addInt64(6, object.status);
          fbb.addInt64(7, object.iconHex);
          fbb.addInt64(8, object.dueDate?.millisecondsSinceEpoch);
          fbb.addInt64(9, object.createdDate.millisecondsSinceEpoch);
          fbb.addInt64(10, object.updatedDate.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.goalId;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dueDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final dueDateParam = dueDateValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(dueDateValue);
          final object = ExpenseGoal(dueDate: dueDateParam)
            ..goalId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..description = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..targetAmount =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0)
            ..currentAmount =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0)
            ..suggestedAmount =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0)
            ..syncStatus =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)
            ..status =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0)
            ..iconHex =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0)
            ..createdDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0))
            ..updatedDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0));

          return object;
        }),
    ExpenseLimit: obx_int.EntityDefinition<ExpenseLimit>(
        model: _entities[4],
        toOneRelations: (ExpenseLimit object) => [object.category],
        toManyRelations: (ExpenseLimit object) => {},
        getId: (ExpenseLimit object) => object.id,
        setId: (ExpenseLimit object, int id) {
          object.id = id;
        },
        objectToFB: (ExpenseLimit object, fb.Builder fbb) {
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(1, object.amount);
          fbb.addInt64(2, object.syncStatus);
          fbb.addInt64(3, object.status);
          fbb.addInt64(4, object.createdDate.millisecondsSinceEpoch);
          fbb.addInt64(5, object.updatedDate.millisecondsSinceEpoch);
          fbb.addInt64(6, object.category.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ExpenseLimit()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..amount =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 6, 0)
            ..syncStatus =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)
            ..status =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)
            ..createdDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0))
            ..updatedDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));
          object.category.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.category.attach(store);
          return object;
        }),
    Expenses: obx_int.EntityDefinition<Expenses>(
        model: _entities[5],
        toOneRelations: (Expenses object) =>
            [object.user, object.category, object.account],
        toManyRelations: (Expenses object) => {},
        getId: (Expenses object) => object.id,
        setId: (Expenses object, int id) {
          object.id = id;
        },
        objectToFB: (Expenses object, fb.Builder fbb) {
          final descriptionOffset = fbb.writeString(object.description);
          final imageOffset =
              object.image == null ? null : fbb.writeListInt8(object.image!);
          fbb.startTable(14);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, descriptionOffset);
          fbb.addFloat64(2, object.amount);
          fbb.addInt64(3, object.expensesType);
          fbb.addInt64(4, object.syncStatus);
          fbb.addInt64(5, object.status);
          fbb.addOffset(6, imageOffset);
          fbb.addInt64(7, object.expensesDate.millisecondsSinceEpoch);
          fbb.addInt64(8, object.createdDate.millisecondsSinceEpoch);
          fbb.addInt64(9, object.updatedDate.millisecondsSinceEpoch);
          fbb.addInt64(10, object.user.targetId);
          fbb.addInt64(11, object.category.targetId);
          fbb.addInt64(12, object.account.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Expenses()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..description = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..amount =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0)
            ..expensesType =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)
            ..syncStatus =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)
            ..status =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)
            ..image = const fb.Uint8ListReader(lazy: false)
                .vTableGetNullable(buffer, rootOffset, 16) as Uint8List?
            ..expensesDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0))
            ..createdDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0))
            ..updatedDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0));
          object.user.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          object.user.attach(store);
          object.category.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          object.category.attach(store);
          object.account.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          object.account.attach(store);
          return object;
        }),
    FinancialBlog: obx_int.EntityDefinition<FinancialBlog>(
        model: _entities[6],
        toOneRelations: (FinancialBlog object) => [],
        toManyRelations: (FinancialBlog object) => {},
        getId: (FinancialBlog object) => object.id,
        setId: (FinancialBlog object, int id) {
          object.id = id;
        },
        objectToFB: (FinancialBlog object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final authorOffset = fbb.writeString(object.author);
          final blogImageOffset = object.blogImage == null
              ? null
              : fbb.writeString(object.blogImage!);
          final authorImageOffset = object.authorImage == null
              ? null
              : fbb.writeString(object.authorImage!);
          final urlOffset =
              object.url == null ? null : fbb.writeString(object.url!);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, authorOffset);
          fbb.addOffset(3, blogImageOffset);
          fbb.addOffset(4, authorImageOffset);
          fbb.addOffset(5, urlOffset);
          fbb.addInt64(6, object.averageReadingTime);
          fbb.addInt64(7, object.status);
          fbb.addInt64(8, object.createdDate.millisecondsSinceEpoch);
          fbb.addInt64(9, object.updatedDate.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = FinancialBlog()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..title = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..author = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..blogImage = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10)
            ..authorImage = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12)
            ..url = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14)
            ..averageReadingTime =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0)
            ..status =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0)
            ..createdDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0))
            ..updatedDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0));

          return object;
        }),
    GoalSavingRecord: obx_int.EntityDefinition<GoalSavingRecord>(
        model: _entities[7],
        toOneRelations: (GoalSavingRecord object) => [object.goal],
        toManyRelations: (GoalSavingRecord object) => {},
        getId: (GoalSavingRecord object) => object.id,
        setId: (GoalSavingRecord object, int id) {
          object.id = id;
        },
        objectToFB: (GoalSavingRecord object, fb.Builder fbb) {
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(1, object.amount);
          fbb.addInt64(2, object.syncStatus);
          fbb.addInt64(3, object.status);
          fbb.addInt64(4, object.savingDate.millisecondsSinceEpoch);
          fbb.addInt64(5, object.createdDate.millisecondsSinceEpoch);
          fbb.addInt64(6, object.updatedDate.millisecondsSinceEpoch);
          fbb.addInt64(7, object.goal.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = GoalSavingRecord()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..amount =
                const fb.Float64Reader().vTableGet(buffer, rootOffset, 6, 0)
            ..syncStatus =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)
            ..status =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)
            ..savingDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0))
            ..createdDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0))
            ..updatedDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0));
          object.goal.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          object.goal.attach(store);
          return object;
        }),
    Notifications: obx_int.EntityDefinition<Notifications>(
        model: _entities[8],
        toOneRelations: (Notifications object) => [],
        toManyRelations: (Notifications object) => {},
        getId: (Notifications object) => object.id,
        setId: (Notifications object, int id) {
          object.id = id;
        },
        objectToFB: (Notifications object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addInt64(3, object.notificationType);
          fbb.addInt64(4, object.readStatus);
          fbb.addInt64(5, object.syncStatus);
          fbb.addInt64(6, object.status);
          fbb.addInt64(7, object.createdDate.millisecondsSinceEpoch);
          fbb.addInt64(8, object.updatedDate.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Notifications()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..title = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..description = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..notificationType =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)
            ..readStatus =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)
            ..syncStatus =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)
            ..status =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0)
            ..createdDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0))
            ..updatedDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0));

          return object;
        }),
    Role: obx_int.EntityDefinition<Role>(
        model: _entities[9],
        toOneRelations: (Role object) => [],
        toManyRelations: (Role object) => {},
        getId: (Role object) => object.id,
        setId: (Role object, int id) {
          object.id = id;
        },
        objectToFB: (Role object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Role()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '');

          return object;
        }),
    Users: obx_int.EntityDefinition<Users>(
        model: _entities[10],
        toOneRelations: (Users object) => [object.role],
        toManyRelations: (Users object) => {},
        getId: (Users object) => object.id,
        setId: (Users object, int id) {
          object.id = id;
        },
        objectToFB: (Users object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final emailOffset = fbb.writeString(object.email);
          final passwordOffset = fbb.writeString(object.password);
          final discordIdOffset = fbb.writeString(object.discordId);
          final profilePictureOffset = object.profilePicture == null
              ? null
              : fbb.writeListInt8(object.profilePicture!);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, emailOffset);
          fbb.addOffset(3, passwordOffset);
          fbb.addInt64(4, object.status);
          fbb.addOffset(5, discordIdOffset);
          fbb.addOffset(6, profilePictureOffset);
          fbb.addInt64(7, object.createdDate.millisecondsSinceEpoch);
          fbb.addInt64(8, object.updatedDate.millisecondsSinceEpoch);
          fbb.addInt64(9, object.role.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Users()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..email = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..password = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 10, '')
            ..status =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)
            ..discordId = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 14, '')
            ..profilePicture = const fb.Uint8ListReader(lazy: false)
                .vTableGetNullable(buffer, rootOffset, 16) as Uint8List?
            ..createdDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0))
            ..updatedDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0));
          object.role.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.role.attach(store);
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Accounts] entity fields to define ObjectBox queries.
class Accounts_ {
  /// See [Accounts.id].
  static final id =
      obx.QueryIntegerProperty<Accounts>(_entities[0].properties[0]);

  /// See [Accounts.accountName].
  static final accountName =
      obx.QueryStringProperty<Accounts>(_entities[0].properties[1]);

  /// See [Accounts.accountIconHex].
  static final accountIconHex =
      obx.QueryIntegerProperty<Accounts>(_entities[0].properties[2]);

  /// See [Accounts.status].
  static final status =
      obx.QueryIntegerProperty<Accounts>(_entities[0].properties[3]);

  /// See [Accounts.createdDate].
  static final createdDate =
      obx.QueryDateProperty<Accounts>(_entities[0].properties[4]);

  /// See [Accounts.updatedDate].
  static final updatedDate =
      obx.QueryDateProperty<Accounts>(_entities[0].properties[5]);
}

/// [AppSetting] entity fields to define ObjectBox queries.
class AppSetting_ {
  /// See [AppSetting.settingId].
  static final settingId =
      obx.QueryIntegerProperty<AppSetting>(_entities[1].properties[0]);

  /// See [AppSetting.appName].
  static final appName =
      obx.QueryStringProperty<AppSetting>(_entities[1].properties[1]);

  /// See [AppSetting.appVersion].
  static final appVersion =
      obx.QueryStringProperty<AppSetting>(_entities[1].properties[2]);

  /// See [AppSetting.appTheme].
  static final appTheme =
      obx.QueryStringProperty<AppSetting>(_entities[1].properties[3]);

  /// See [AppSetting.appLanguage].
  static final appLanguage =
      obx.QueryStringProperty<AppSetting>(_entities[1].properties[4]);

  /// See [AppSetting.currencyIndicator].
  static final currencyIndicator =
      obx.QueryStringProperty<AppSetting>(_entities[1].properties[5]);

  /// See [AppSetting.currencyCode].
  static final currencyCode =
      obx.QueryStringProperty<AppSetting>(_entities[1].properties[6]);

  /// See [AppSetting.isNotificationOn].
  static final isNotificationOn =
      obx.QueryBooleanProperty<AppSetting>(_entities[1].properties[7]);

  /// See [AppSetting.isGoogleSignIn].
  static final isGoogleSignIn =
      obx.QueryBooleanProperty<AppSetting>(_entities[1].properties[8]);

  /// See [AppSetting.isBiometricOn].
  static final isBiometricOn =
      obx.QueryBooleanProperty<AppSetting>(_entities[1].properties[9]);

  /// See [AppSetting.lastBackupDate].
  static final lastBackupDate =
      obx.QueryDateProperty<AppSetting>(_entities[1].properties[10]);

  /// See [AppSetting.lastRestoreDate].
  static final lastRestoreDate =
      obx.QueryDateProperty<AppSetting>(_entities[1].properties[11]);

  /// See [AppSetting.lastResyncDate].
  static final lastResyncDate =
      obx.QueryDateProperty<AppSetting>(_entities[1].properties[12]);

  /// See [AppSetting.monthlyLimit].
  static final monthlyLimit =
      obx.QueryDoubleProperty<AppSetting>(_entities[1].properties[13]);

  /// See [AppSetting.endOfMonth].
  static final endOfMonth =
      obx.QueryIntegerProperty<AppSetting>(_entities[1].properties[14]);
}

/// [Category] entity fields to define ObjectBox queries.
class Category_ {
  /// See [Category.id].
  static final id =
      obx.QueryIntegerProperty<Category>(_entities[2].properties[0]);

  /// See [Category.categoryName].
  static final categoryName =
      obx.QueryStringProperty<Category>(_entities[2].properties[1]);

  /// See [Category.categoryType].
  static final categoryType =
      obx.QueryIntegerProperty<Category>(_entities[2].properties[2]);

  /// See [Category.status].
  static final status =
      obx.QueryIntegerProperty<Category>(_entities[2].properties[3]);

  /// See [Category.iconHex].
  static final iconHex =
      obx.QueryIntegerProperty<Category>(_entities[2].properties[4]);

  /// See [Category.createdDate].
  static final createdDate =
      obx.QueryDateProperty<Category>(_entities[2].properties[5]);

  /// See [Category.updatedDate].
  static final updatedDate =
      obx.QueryDateProperty<Category>(_entities[2].properties[6]);

  /// See [Category.iconColor].
  static final iconColor =
      obx.QueryIntegerProperty<Category>(_entities[2].properties[7]);
}

/// [ExpenseGoal] entity fields to define ObjectBox queries.
class ExpenseGoal_ {
  /// See [ExpenseGoal.goalId].
  static final goalId =
      obx.QueryIntegerProperty<ExpenseGoal>(_entities[3].properties[0]);

  /// See [ExpenseGoal.description].
  static final description =
      obx.QueryStringProperty<ExpenseGoal>(_entities[3].properties[1]);

  /// See [ExpenseGoal.targetAmount].
  static final targetAmount =
      obx.QueryDoubleProperty<ExpenseGoal>(_entities[3].properties[2]);

  /// See [ExpenseGoal.currentAmount].
  static final currentAmount =
      obx.QueryDoubleProperty<ExpenseGoal>(_entities[3].properties[3]);

  /// See [ExpenseGoal.suggestedAmount].
  static final suggestedAmount =
      obx.QueryDoubleProperty<ExpenseGoal>(_entities[3].properties[4]);

  /// See [ExpenseGoal.syncStatus].
  static final syncStatus =
      obx.QueryIntegerProperty<ExpenseGoal>(_entities[3].properties[5]);

  /// See [ExpenseGoal.status].
  static final status =
      obx.QueryIntegerProperty<ExpenseGoal>(_entities[3].properties[6]);

  /// See [ExpenseGoal.iconHex].
  static final iconHex =
      obx.QueryIntegerProperty<ExpenseGoal>(_entities[3].properties[7]);

  /// See [ExpenseGoal.dueDate].
  static final dueDate =
      obx.QueryDateProperty<ExpenseGoal>(_entities[3].properties[8]);

  /// See [ExpenseGoal.createdDate].
  static final createdDate =
      obx.QueryDateProperty<ExpenseGoal>(_entities[3].properties[9]);

  /// See [ExpenseGoal.updatedDate].
  static final updatedDate =
      obx.QueryDateProperty<ExpenseGoal>(_entities[3].properties[10]);
}

/// [ExpenseLimit] entity fields to define ObjectBox queries.
class ExpenseLimit_ {
  /// See [ExpenseLimit.id].
  static final id =
      obx.QueryIntegerProperty<ExpenseLimit>(_entities[4].properties[0]);

  /// See [ExpenseLimit.amount].
  static final amount =
      obx.QueryDoubleProperty<ExpenseLimit>(_entities[4].properties[1]);

  /// See [ExpenseLimit.syncStatus].
  static final syncStatus =
      obx.QueryIntegerProperty<ExpenseLimit>(_entities[4].properties[2]);

  /// See [ExpenseLimit.status].
  static final status =
      obx.QueryIntegerProperty<ExpenseLimit>(_entities[4].properties[3]);

  /// See [ExpenseLimit.createdDate].
  static final createdDate =
      obx.QueryDateProperty<ExpenseLimit>(_entities[4].properties[4]);

  /// See [ExpenseLimit.updatedDate].
  static final updatedDate =
      obx.QueryDateProperty<ExpenseLimit>(_entities[4].properties[5]);

  /// See [ExpenseLimit.category].
  static final category = obx.QueryRelationToOne<ExpenseLimit, Category>(
      _entities[4].properties[6]);
}

/// [Expenses] entity fields to define ObjectBox queries.
class Expenses_ {
  /// See [Expenses.id].
  static final id =
      obx.QueryIntegerProperty<Expenses>(_entities[5].properties[0]);

  /// See [Expenses.description].
  static final description =
      obx.QueryStringProperty<Expenses>(_entities[5].properties[1]);

  /// See [Expenses.amount].
  static final amount =
      obx.QueryDoubleProperty<Expenses>(_entities[5].properties[2]);

  /// See [Expenses.expensesType].
  static final expensesType =
      obx.QueryIntegerProperty<Expenses>(_entities[5].properties[3]);

  /// See [Expenses.syncStatus].
  static final syncStatus =
      obx.QueryIntegerProperty<Expenses>(_entities[5].properties[4]);

  /// See [Expenses.status].
  static final status =
      obx.QueryIntegerProperty<Expenses>(_entities[5].properties[5]);

  /// See [Expenses.image].
  static final image =
      obx.QueryByteVectorProperty<Expenses>(_entities[5].properties[6]);

  /// See [Expenses.expensesDate].
  static final expensesDate =
      obx.QueryDateProperty<Expenses>(_entities[5].properties[7]);

  /// See [Expenses.createdDate].
  static final createdDate =
      obx.QueryDateProperty<Expenses>(_entities[5].properties[8]);

  /// See [Expenses.updatedDate].
  static final updatedDate =
      obx.QueryDateProperty<Expenses>(_entities[5].properties[9]);

  /// See [Expenses.user].
  static final user =
      obx.QueryRelationToOne<Expenses, Users>(_entities[5].properties[10]);

  /// See [Expenses.category].
  static final category =
      obx.QueryRelationToOne<Expenses, Category>(_entities[5].properties[11]);

  /// See [Expenses.account].
  static final account =
      obx.QueryRelationToOne<Expenses, Accounts>(_entities[5].properties[12]);
}

/// [FinancialBlog] entity fields to define ObjectBox queries.
class FinancialBlog_ {
  /// See [FinancialBlog.id].
  static final id =
      obx.QueryIntegerProperty<FinancialBlog>(_entities[6].properties[0]);

  /// See [FinancialBlog.title].
  static final title =
      obx.QueryStringProperty<FinancialBlog>(_entities[6].properties[1]);

  /// See [FinancialBlog.author].
  static final author =
      obx.QueryStringProperty<FinancialBlog>(_entities[6].properties[2]);

  /// See [FinancialBlog.blogImage].
  static final blogImage =
      obx.QueryStringProperty<FinancialBlog>(_entities[6].properties[3]);

  /// See [FinancialBlog.authorImage].
  static final authorImage =
      obx.QueryStringProperty<FinancialBlog>(_entities[6].properties[4]);

  /// See [FinancialBlog.url].
  static final url =
      obx.QueryStringProperty<FinancialBlog>(_entities[6].properties[5]);

  /// See [FinancialBlog.averageReadingTime].
  static final averageReadingTime =
      obx.QueryIntegerProperty<FinancialBlog>(_entities[6].properties[6]);

  /// See [FinancialBlog.status].
  static final status =
      obx.QueryIntegerProperty<FinancialBlog>(_entities[6].properties[7]);

  /// See [FinancialBlog.createdDate].
  static final createdDate =
      obx.QueryDateProperty<FinancialBlog>(_entities[6].properties[8]);

  /// See [FinancialBlog.updatedDate].
  static final updatedDate =
      obx.QueryDateProperty<FinancialBlog>(_entities[6].properties[9]);
}

/// [GoalSavingRecord] entity fields to define ObjectBox queries.
class GoalSavingRecord_ {
  /// See [GoalSavingRecord.id].
  static final id =
      obx.QueryIntegerProperty<GoalSavingRecord>(_entities[7].properties[0]);

  /// See [GoalSavingRecord.amount].
  static final amount =
      obx.QueryDoubleProperty<GoalSavingRecord>(_entities[7].properties[1]);

  /// See [GoalSavingRecord.syncStatus].
  static final syncStatus =
      obx.QueryIntegerProperty<GoalSavingRecord>(_entities[7].properties[2]);

  /// See [GoalSavingRecord.status].
  static final status =
      obx.QueryIntegerProperty<GoalSavingRecord>(_entities[7].properties[3]);

  /// See [GoalSavingRecord.savingDate].
  static final savingDate =
      obx.QueryDateProperty<GoalSavingRecord>(_entities[7].properties[4]);

  /// See [GoalSavingRecord.createdDate].
  static final createdDate =
      obx.QueryDateProperty<GoalSavingRecord>(_entities[7].properties[5]);

  /// See [GoalSavingRecord.updatedDate].
  static final updatedDate =
      obx.QueryDateProperty<GoalSavingRecord>(_entities[7].properties[6]);

  /// See [GoalSavingRecord.goal].
  static final goal = obx.QueryRelationToOne<GoalSavingRecord, ExpenseGoal>(
      _entities[7].properties[7]);
}

/// [Notifications] entity fields to define ObjectBox queries.
class Notifications_ {
  /// See [Notifications.id].
  static final id =
      obx.QueryIntegerProperty<Notifications>(_entities[8].properties[0]);

  /// See [Notifications.title].
  static final title =
      obx.QueryStringProperty<Notifications>(_entities[8].properties[1]);

  /// See [Notifications.description].
  static final description =
      obx.QueryStringProperty<Notifications>(_entities[8].properties[2]);

  /// See [Notifications.notificationType].
  static final notificationType =
      obx.QueryIntegerProperty<Notifications>(_entities[8].properties[3]);

  /// See [Notifications.readStatus].
  static final readStatus =
      obx.QueryIntegerProperty<Notifications>(_entities[8].properties[4]);

  /// See [Notifications.syncStatus].
  static final syncStatus =
      obx.QueryIntegerProperty<Notifications>(_entities[8].properties[5]);

  /// See [Notifications.status].
  static final status =
      obx.QueryIntegerProperty<Notifications>(_entities[8].properties[6]);

  /// See [Notifications.createdDate].
  static final createdDate =
      obx.QueryDateProperty<Notifications>(_entities[8].properties[7]);

  /// See [Notifications.updatedDate].
  static final updatedDate =
      obx.QueryDateProperty<Notifications>(_entities[8].properties[8]);
}

/// [Role] entity fields to define ObjectBox queries.
class Role_ {
  /// See [Role.id].
  static final id = obx.QueryIntegerProperty<Role>(_entities[9].properties[0]);

  /// See [Role.name].
  static final name = obx.QueryStringProperty<Role>(_entities[9].properties[1]);
}

/// [Users] entity fields to define ObjectBox queries.
class Users_ {
  /// See [Users.id].
  static final id =
      obx.QueryIntegerProperty<Users>(_entities[10].properties[0]);

  /// See [Users.name].
  static final name =
      obx.QueryStringProperty<Users>(_entities[10].properties[1]);

  /// See [Users.email].
  static final email =
      obx.QueryStringProperty<Users>(_entities[10].properties[2]);

  /// See [Users.password].
  static final password =
      obx.QueryStringProperty<Users>(_entities[10].properties[3]);

  /// See [Users.status].
  static final status =
      obx.QueryIntegerProperty<Users>(_entities[10].properties[4]);

  /// See [Users.discordId].
  static final discordId =
      obx.QueryStringProperty<Users>(_entities[10].properties[5]);

  /// See [Users.profilePicture].
  static final profilePicture =
      obx.QueryByteVectorProperty<Users>(_entities[10].properties[6]);

  /// See [Users.createdDate].
  static final createdDate =
      obx.QueryDateProperty<Users>(_entities[10].properties[7]);

  /// See [Users.updatedDate].
  static final updatedDate =
      obx.QueryDateProperty<Users>(_entities[10].properties[8]);

  /// See [Users.role].
  static final role =
      obx.QueryRelationToOne<Users, Role>(_entities[10].properties[9]);
}
